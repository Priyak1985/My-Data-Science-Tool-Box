ipywidgets==7.5.1
factor_analyzer==0.3.2
imbalanced_learn==0.7.0
bokeh==2.1.1
numpy==1.18.5
pandas==1.0.5
seaborn==0.10.1
~~ipy==1.5.0
matplotlib==3.2.2
statsmodels==0.11.1
apyori==1.1.2
imblearn==0.0
lightgbm==3.2.0
mlxtend==0.18.0
scikit_learn==0.24.1
scipy==1.6.2
=======================================
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c4b3ea7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import  MyToolSet as my_internal_func\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5cc2533f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import data created during the processing stage of Part 1\n",
    "\n",
    "dframe_demo_alltestresults=pd.read_csv('output/dframe_demo_alltestresults.csv')\n",
    "dframe_target=pd.read_csv('T_stage.csv')\n",
    "\n",
    "# The CKD-EPI (Chronic Kidney Disease Epidemiology Collaboration) equation was developed\n",
    "# in an effort to create a more precise formula to estimate glomerular filtrate rate (GFR) from serum creatinine \n",
    "# and other readily available clinical parameters,\n",
    "\n",
    "\n",
    "def eGFScore(row):\n",
    "    k= 0.7 if row['gender']=='Female' else 0.9\n",
    "    alpha=-0.329 if row['gender']=='Female' else -0.411\n",
    "    f1=1.018 if row['gender']=='Female' else 1\n",
    "    f2=1.159 if row['race']=='Black' else 1\n",
    "    \n",
    "    egfr=141* (min(row['Creatinine']/k,1))**alpha * (max(row['Creatinine']/k,1))**(-1.209)*  0.993**row['age']*f1*f2\n",
    "    return round(egfr)\n",
    "         \n",
    "    \n",
    "def CKD_stage(x):\n",
    "    if x>=90: return 1\n",
    "    elif 60<=x<=89: return 2\n",
    "    elif 45<=x<=59: return 3\n",
    "    elif 30<=x<=44 :return 3.5\n",
    "    elif 15<=x<=29: return 4\n",
    "    elif x<=15: return 5\n",
    "    else: return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3c057a53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>CKD(t=0)</th>\n",
       "      <th>CKD</th>\n",
       "      <th>time</th>\n",
       "      <th>target_new</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1196</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1394</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1254</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1414</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1080</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>295</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1157</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>296</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1159</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>297</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1008</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>298</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>877</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>299</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1295</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>300 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  CKD(t=0)  CKD  time  target_new\n",
       "0      0       3.0  3.0  1196           0\n",
       "1      1       4.0  4.0  1394           0\n",
       "2      2       4.0  4.0  1254           0\n",
       "3      3       1.0  3.0  1414           1\n",
       "4      4       3.0  3.0  1080           0\n",
       "..   ...       ...  ...   ...         ...\n",
       "295  295       4.0  4.0  1157           0\n",
       "296  296       4.0  4.0  1159           0\n",
       "297  297       3.0  3.0  1008           0\n",
       "298  298       3.0  3.5   877           1\n",
       "299  299       2.0  2.0  1295           0\n",
       "\n",
       "[300 rows x 5 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Treat duplicate EHR records\n",
    "dframe_demo_alltestresults['eGFR']=dframe_demo_alltestresults.apply(eGFScore,axis=1)\n",
    "\n",
    "dframe_demo_alltestresults['CKD']=dframe_demo_alltestresults.apply(lambda x: CKD_stage(x['eGFR']),axis=1)\n",
    "\n",
    "dframe_demo_alltestresults_grp=dframe_demo_alltestresults.groupby('id',as_index=False).agg({'CKD(t=0)':max,'CKD':max,'time':max})\n",
    "dframe_demo_alltestresults_grp['target_new']=dframe_demo_alltestresults_grp.apply(lambda x: 1 if x['CKD']>x['CKD(t=0)'] else 0,axis=1)\n",
    "\n",
    "dframe_demo_alltestresults_grp.groupby('target_new')['id'].nunique()\n",
    "dframe_target=dframe_target.merge(dframe_demo_alltestresults_grp[['id','target_new']],on='id',how='inner')\n",
    "dframe_target.to_csv('T_med_new.csv')\n",
    "dframe_demo_alltestresults_grp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6c795166",
   "metadata": {},
   "outputs": [],
   "source": [
    "dframe_medications=pd.read_csv('T_meds.csv')[['id','drug','Medication Duration (days)']]\n",
    "list_multiple_medication=[197,250,220,10,278,17,198,46,224,68,268,99,100,140]\n",
    "\n",
    "dframe_medications['Medicated']=dframe_medications['Medication Duration (days)'].apply(lambda x: 1 if x>0 else 0)\n",
    "dframe_medications=dframe_medications.groupby(['id','drug'],as_index=False)['Medicated'].max()\n",
    "dframe_medications_statin=dframe_medications[dframe_medications.drug.isin(['atorvastatin','simvastatin'])]\n",
    "dframe_medications_statin[~dframe_medications_statin.id.isin(list_multiple_medication)]\n",
    "\n",
    "dframe_medications_SBP=dframe_medications[dframe_medications.drug.isin(['losartan','metoprolol'])]\n",
    "\n",
    "dframe_medications_statin=dframe_medications_statin.merge(dframe_demo_alltestresults_grp,on='id',how='inner')\n",
    "dframe_medications_SBP=dframe_medications_SBP.merge(dframe_demo_alltestresults_grp,on='id',how='inner')\n",
    "dframe_medications_statin.to_csv('output/Statin.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "082029e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from lifelines import KaplanMeierFitter\n",
    "\n",
    "kmf = KaplanMeierFitter() \n",
    "\n",
    "\n",
    "T = dframe_medications_statin['time']     ## time to event\n",
    "E = dframe_medications_statin['target_new']      ## event occurred or censored\n",
    "\n",
    "\n",
    "groups = dframe_medications_statin['drug']             ## Create the cohorts from the 'Contract' column\n",
    "ix1 = (groups == 'atorvastatin')   ## Cohort 1\n",
    "ix2 = (groups == 'simvastatin')         ## Cohort 2\n",
    "\n",
    "\n",
    "\n",
    "kmf.fit(T[ix1], E[ix1], label='atorvastatin')    ## fit the cohort 1 data\n",
    "ax = kmf.plot()\n",
    "\n",
    "\n",
    "kmf.fit(T[ix2], E[ix2], label='simvastatin')         ## fit the cohort 2 data\n",
    "ax1 = kmf.plot(ax=ax)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "69a412d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "kmf = KaplanMeierFitter() \n",
    "\n",
    "\n",
    "T = dframe_medications_SBP['time']     ## time to event\n",
    "E = dframe_medications_SBP['target_new']      ## event occurred or censored\n",
    "\n",
    "\n",
    "groups = dframe_medications_SBP['drug']             ## Create the cohorts from the 'Contract' column\n",
    "ix1 = (groups == 'losartan')   ## Cohort 1\n",
    "ix2 = (groups == 'metoprolol')         ## Cohort 2\n",
    "\n",
    "\n",
    "\n",
    "kmf.fit(T[ix1], E[ix1], label='losartan')    ## fit the cohort 1 data\n",
    "ax = kmf.plot()\n",
    "\n",
    "\n",
    "kmf.fit(T[ix2], E[ix2], label='metoprolol')         ## fit the cohort 2 data\n",
    "ax1 = kmf.plot(ax=ax)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
