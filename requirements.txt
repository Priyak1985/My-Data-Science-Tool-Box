ipywidgets==7.5.1
factor_analyzer==0.3.2
imbalanced_learn==0.7.0
bokeh==2.1.1
numpy==1.18.5
pandas==1.0.5
seaborn==0.10.1
~~ipy==1.5.0
matplotlib==3.2.2
statsmodels==0.11.1
apyori==1.1.2
imblearn==0.0
lightgbm==3.2.0
mlxtend==0.18.0
scikit_learn==0.24.1
scipy==1.6.2
=======================================
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "535a847a",
   "metadata": {},
   "source": [
    "# <font color='Blue'> Part 2: Analysis of Chronic Kidney Disease Progression in Patients </font>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a44bf162",
   "metadata": {},
   "source": [
    "###### Chronic kidney disease,  or CKD, is a condition characterized by a gradual loss of kidney function over time. Early detection can help prevent the progression of kidney disease to kidney failure\n",
    "\n",
    "For this task, you are given a set of longitudinal data (attached) of different lab measurements for patients diagnosed with chronic kidney disease (CKD). Furthermore, you are also given the information whether these patients progress in their CKD stage or not in the future. Using this dataset, you are required to come up with a solution to predict whether a patient will progress in CKD staging given the patient's past longitudinal information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c660dd50",
   "metadata": {},
   "outputs": [],
   "source": [
    "import  MyToolSet as my_internal_func\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import f1_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02f5e5b0",
   "metadata": {},
   "source": [
    "### 1. Data Import"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "adcbabba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import data created during the processing stage of Part 1\n",
    "\n",
    "dframe_demoalltestresults=pd.read_csv('output/dframe_demo_alltestresults.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0bda5f87",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The CKD-EPI (Chronic Kidney Disease Epidemiology Collaboration) equation was developed\n",
    "# in an effort to create a more precise formula to estimate glomerular filtrate rate (GFR) from serum creatinine \n",
    "# and other readily available clinical parameters,\n",
    "\n",
    "\n",
    "def eGFScore(row):\n",
    "    k= 0.7 if row['gender']=='Female' else 0.9\n",
    "    alpha=-0.329 if row['gender']=='Female' else -0.411\n",
    "    f1=1.018 if row['gender']=='Female' else 1\n",
    "    f2=1.159 if row['race']=='Black' else 1\n",
    "    \n",
    "    egfr=141* (min(row['Creatinine_mean']/k,1))**alpha * (max(row['Creatinine_mean']/k,1))**(-1.209)*  0.993**row['age']*f1*f2\n",
    "    return round(egfr)\n",
    "         \n",
    "    \n",
    "def CKD_stage(x):\n",
    "    if x>=90: return 1\n",
    "    elif 60<=x<=89: return 2\n",
    "    elif 45<=x<=59: return 3\n",
    "    elif 30<=x<=44 :return 3.5\n",
    "    elif 15<=x<=29: return 4\n",
    "    elif x<=15: return 5\n",
    "    else: return 0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "77f3a429",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(14, 1)\n",
      "(300, 1)\n",
      "   id  rankscore\n",
      "0   0        1.0\n",
      "1   0        2.0\n",
      "2   0        3.0\n",
      "3   0        4.0\n",
      "4   0        5.0\n",
      "(4200, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>CKD(t=0)</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>SBP</th>\n",
       "      <th>HGB</th>\n",
       "      <th>Lipoprotein</th>\n",
       "      <th>Time Window</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.78</td>\n",
       "      <td>147.5</td>\n",
       "      <td>13.13</td>\n",
       "      <td>157.9</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.78</td>\n",
       "      <td>147.5</td>\n",
       "      <td>13.65</td>\n",
       "      <td>157.9</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.78</td>\n",
       "      <td>147.5</td>\n",
       "      <td>12.63</td>\n",
       "      <td>157.9</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.78</td>\n",
       "      <td>147.5</td>\n",
       "      <td>13.36</td>\n",
       "      <td>157.9</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.78</td>\n",
       "      <td>147.5</td>\n",
       "      <td>13.53</td>\n",
       "      <td>157.9</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id gender  CKD(t=0)  Glucose    SBP    HGB  Lipoprotein  Time Window\n",
       "0   0   Male       0.0     5.78  147.5  13.13        157.9          1.0\n",
       "1   0   Male       0.0     5.78  147.5  13.65        157.9          2.0\n",
       "2   0   Male       0.0     5.78  147.5  12.63        157.9          3.0\n",
       "3   0   Male       0.0     5.78  147.5  13.36        157.9          4.0\n",
       "4   0   Male       0.0     5.78  147.5  13.53        157.9          5.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Treat duplicate EHR records\n",
    "dframe_demoalltestresults=dframe_demoalltestresults.groupby(['id','gender','CKD(t=0)','time'],as_index=False)[['Glucose','SBP','HGB','Lipoprotein']].mean()\n",
    "dframe_demoalltestresults['rankscore']=dframe_demoalltestresults.sort_values(['id','time']).groupby(['id'],as_index=False)['time'].rank(ascending=False)\n",
    "\n",
    "dframe_demoalltestresults=dframe_demoalltestresults.sort_values(['id','time'])[dframe_demoalltestresults.rankscore<15]\n",
    "\n",
    "\n",
    "dframe_crossjoin1=pd.DataFrame(dframe_demoalltestresults[\"rankscore\"].sort_values().unique())\n",
    "dframe_crossjoin2=pd.DataFrame(dframe_demoalltestresults[\"id\"].sort_values().unique())\n",
    "print(dframe_crossjoin1.shape)\n",
    "print(dframe_crossjoin2.shape)\n",
    "dframe_cros12=dframe_crossjoin2.merge(dframe_crossjoin1,how='cross')\n",
    "dframe_cros12.columns=['id','rankscore']\n",
    "print(dframe_cros12.head(5))\n",
    "\n",
    "print(dframe_cros12.shape)\n",
    "\n",
    "dframe_temporalData=dframe_demoalltestresults.merge(dframe_cros12,how='right',on=['id','rankscore'])\n",
    "dframe_temporalData.update(dframe_temporalData.sort_values(['id','time']).groupby('id',as_index=False).ffill())\n",
    "\n",
    "del(dframe_temporalData['time'])\n",
    "dframe_temporalData.rename(columns={'rankscore':'Time Window'},inplace=True)\n",
    "dframe_smoothened_temporal=dframe_temporalData\n",
    "dframe_temporalData.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6eb04506",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(300, 57)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>CKD(t=0)</th>\n",
       "      <th>Glucose_1.0</th>\n",
       "      <th>Glucose_2.0</th>\n",
       "      <th>Glucose_3.0</th>\n",
       "      <th>Glucose_4.0</th>\n",
       "      <th>Glucose_5.0</th>\n",
       "      <th>Glucose_6.0</th>\n",
       "      <th>Glucose_7.0</th>\n",
       "      <th>...</th>\n",
       "      <th>Lipoprotein_6.0</th>\n",
       "      <th>Lipoprotein_7.0</th>\n",
       "      <th>Lipoprotein_8.0</th>\n",
       "      <th>Lipoprotein_9.0</th>\n",
       "      <th>Lipoprotein_10.0</th>\n",
       "      <th>Lipoprotein_11.0</th>\n",
       "      <th>Lipoprotein_12.0</th>\n",
       "      <th>Lipoprotein_13.0</th>\n",
       "      <th>Lipoprotein_14.0</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.663496</td>\n",
       "      <td>-0.663496</td>\n",
       "      <td>...</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>0.890310</td>\n",
       "      <td>0.890310</td>\n",
       "      <td>0.890310</td>\n",
       "      <td>0.890310</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.476681</td>\n",
       "      <td>-0.476681</td>\n",
       "      <td>-0.269572</td>\n",
       "      <td>-0.269572</td>\n",
       "      <td>-0.269572</td>\n",
       "      <td>-0.536878</td>\n",
       "      <td>-0.536878</td>\n",
       "      <td>-0.536878</td>\n",
       "      <td>0.436677</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>-0.973528</td>\n",
       "      <td>-0.973528</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021384</td>\n",
       "      <td>0.021384</td>\n",
       "      <td>-0.338727</td>\n",
       "      <td>-0.338727</td>\n",
       "      <td>-0.338727</td>\n",
       "      <td>-0.338727</td>\n",
       "      <td>-0.893048</td>\n",
       "      <td>-0.893048</td>\n",
       "      <td>0.021384</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>...</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>-0.205791</td>\n",
       "      <td>-0.205791</td>\n",
       "      <td>-0.205791</td>\n",
       "      <td>0.850895</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.672452</td>\n",
       "      <td>2.672452</td>\n",
       "      <td>2.672452</td>\n",
       "      <td>2.672452</td>\n",
       "      <td>2.672452</td>\n",
       "      <td>1.946977</td>\n",
       "      <td>1.946977</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.520037</td>\n",
       "      <td>-0.520037</td>\n",
       "      <td>-1.144231</td>\n",
       "      <td>-1.144231</td>\n",
       "      <td>-1.144231</td>\n",
       "      <td>-1.144231</td>\n",
       "      <td>-0.547628</td>\n",
       "      <td>-0.547628</td>\n",
       "      <td>-0.547628</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>295</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>-0.520881</td>\n",
       "      <td>-0.520881</td>\n",
       "      <td>-0.520881</td>\n",
       "      <td>-0.520881</td>\n",
       "      <td>-0.266654</td>\n",
       "      <td>-0.266654</td>\n",
       "      <td>-0.961127</td>\n",
       "      <td>...</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>1.252930</td>\n",
       "      <td>1.252930</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>296</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>...</td>\n",
       "      <td>0.189078</td>\n",
       "      <td>0.189078</td>\n",
       "      <td>0.607954</td>\n",
       "      <td>0.607954</td>\n",
       "      <td>1.483688</td>\n",
       "      <td>1.483688</td>\n",
       "      <td>1.483688</td>\n",
       "      <td>0.162921</td>\n",
       "      <td>0.162921</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>297</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>0.756452</td>\n",
       "      <td>0.756452</td>\n",
       "      <td>...</td>\n",
       "      <td>0.805030</td>\n",
       "      <td>0.805030</td>\n",
       "      <td>1.547111</td>\n",
       "      <td>1.547111</td>\n",
       "      <td>1.547111</td>\n",
       "      <td>1.547111</td>\n",
       "      <td>1.504829</td>\n",
       "      <td>1.504829</td>\n",
       "      <td>1.504829</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>298</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-0.440273</td>\n",
       "      <td>-0.440273</td>\n",
       "      <td>-0.440273</td>\n",
       "      <td>-0.837114</td>\n",
       "      <td>-0.837114</td>\n",
       "      <td>-0.837114</td>\n",
       "      <td>-0.781308</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.356643</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>-0.613200</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>299</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-0.303858</td>\n",
       "      <td>-0.303858</td>\n",
       "      <td>-0.303858</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.475247</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>300 rows × 60 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  gender  CKD(t=0)  Glucose_1.0  Glucose_2.0  Glucose_3.0  \\\n",
       "0      0       1       3.0    -0.564285    -0.564285    -0.564285   \n",
       "1      1       0       4.0     1.915973     1.915973     1.915973   \n",
       "2      2       0       4.0     0.216996     0.216996     0.216996   \n",
       "3      3       1       1.0    -0.570486    -0.570486    -0.570486   \n",
       "4      4       0       3.0     2.672452     2.672452     2.672452   \n",
       "..   ...     ...       ...          ...          ...          ...   \n",
       "295  295       0       4.0    -0.520881    -0.520881    -0.520881   \n",
       "296  296       0       4.0     0.725449     0.725449     0.725449   \n",
       "297  297       1       3.0     1.791960     1.791960     1.791960   \n",
       "298  298       0       3.0    -0.440273    -0.440273    -0.440273   \n",
       "299  299       1       2.0    -0.303858    -0.303858    -0.303858   \n",
       "\n",
       "     Glucose_4.0  Glucose_5.0  Glucose_6.0  Glucose_7.0  ...  Lipoprotein_6.0  \\\n",
       "0      -0.564285    -0.564285    -0.663496    -0.663496  ...         2.556857   \n",
       "1       1.915973     1.915973     1.915973     1.915973  ...        -0.476681   \n",
       "2       0.216996     0.216996    -0.973528    -0.973528  ...         0.021384   \n",
       "3      -0.570486    -0.570486    -0.570486    -0.570486  ...         0.533065   \n",
       "4       2.672452     2.672452     1.946977     1.946977  ...        -0.520037   \n",
       "..           ...          ...          ...          ...  ...              ...   \n",
       "295    -0.520881    -0.266654    -0.266654    -0.961127  ...         0.746266   \n",
       "296     0.725449     0.725449     0.725449     0.725449  ...         0.189078   \n",
       "297     1.791960     1.791960     0.756452     0.756452  ...         0.805030   \n",
       "298    -0.837114    -0.837114    -0.837114    -0.781308  ...        -0.356643   \n",
       "299    -0.341062    -0.341062    -0.341062    -0.341062  ...        -0.475247   \n",
       "\n",
       "     Lipoprotein_7.0  Lipoprotein_8.0  Lipoprotein_9.0  Lipoprotein_10.0  \\\n",
       "0           2.556857         2.556857         2.556857          2.556857   \n",
       "1          -0.476681        -0.269572        -0.269572         -0.269572   \n",
       "2           0.021384        -0.338727        -0.338727         -0.338727   \n",
       "3           0.533065         0.533065         0.533065          0.533065   \n",
       "4          -0.520037        -1.144231        -1.144231         -1.144231   \n",
       "..               ...              ...              ...               ...   \n",
       "295         0.746266         0.746266         0.746266          0.746266   \n",
       "296         0.189078         0.607954         0.607954          1.483688   \n",
       "297         0.805030         1.547111         1.547111          1.547111   \n",
       "298         0.597205         0.597205         0.597205          0.597205   \n",
       "299        -0.719980        -0.719980        -0.719980         -0.719980   \n",
       "\n",
       "     Lipoprotein_11.0  Lipoprotein_12.0  Lipoprotein_13.0  Lipoprotein_14.0  \\\n",
       "0            0.890310          0.890310          0.890310          0.890310   \n",
       "1           -0.536878         -0.536878         -0.536878          0.436677   \n",
       "2           -0.338727         -0.893048         -0.893048          0.021384   \n",
       "3           -0.205791         -0.205791         -0.205791          0.850895   \n",
       "4           -1.144231         -0.547628         -0.547628         -0.547628   \n",
       "..                ...               ...               ...               ...   \n",
       "295          0.746266          0.746266          1.252930          1.252930   \n",
       "296          1.483688          1.483688          0.162921          0.162921   \n",
       "297          1.547111          1.504829          1.504829          1.504829   \n",
       "298          0.597205          0.597205          0.597205         -0.613200   \n",
       "299         -0.719980         -0.719980         -0.719980         -0.719980   \n",
       "\n",
       "     target  \n",
       "0         1  \n",
       "1         0  \n",
       "2         1  \n",
       "3         0  \n",
       "4         1  \n",
       "..      ...  \n",
       "295       1  \n",
       "296       0  \n",
       "297       1  \n",
       "298       0  \n",
       "299       0  \n",
       "\n",
       "[300 rows x 60 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "dframe_container=pd.DataFrame()\n",
    "dframe_container['id']=dframe_temporalData['id'].unique()\n",
    "\n",
    "scaler=StandardScaler()        \n",
    "    \n",
    "for col in ['Glucose','HGB','SBP','Lipoprotein']:\n",
    "    dframe_smoothened_temporal[col]=scaler.fit_transform(dframe_smoothened_temporal[col].values.astype(float).reshape(-1, 1))\n",
    "    dframe_temp=pd.pivot_table(dframe_smoothened_temporal,\n",
    "                               index=['id'],\n",
    "                               columns='Time Window',\n",
    "                               values=col,\n",
    "                               aggfunc=max)\n",
    "    orig_col=dframe_temp.columns\n",
    "    new_col=[ col+\"_\"+str(x) for x in orig_col]\n",
    "    dframe_temp.columns=new_col\n",
    "    dframe_temp=dframe_temp.reset_index()\n",
    "    \n",
    "    dframe_container=dframe_container.merge(dframe_temp,how='left',on='id')\n",
    "print(dframe_container.shape)    \n",
    "dframe_container=pd.read_csv('Output/Prediction_Ready.csv')[['id','gender','CKD(t=0)']].merge(dframe_container,on='id',how='inner')\n",
    "dframe_container=dframe_container.merge(pd.read_csv('T_Stage.csv')[['id','target']],on='id',how='inner')\n",
    "dframe_container['gender']=dframe_container['gender'].apply(lambda x: 1 if x==\"Male\" else 0)\n",
    "# dframe_container=dframe_container.set_index('id')\n",
    "dframe_container\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "879586c4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>CKD(t=0)</th>\n",
       "      <th>Glucose_1.0</th>\n",
       "      <th>Glucose_2.0</th>\n",
       "      <th>Glucose_3.0</th>\n",
       "      <th>Glucose_4.0</th>\n",
       "      <th>Glucose_5.0</th>\n",
       "      <th>Glucose_6.0</th>\n",
       "      <th>Glucose_7.0</th>\n",
       "      <th>...</th>\n",
       "      <th>Lipoprotein_6.0</th>\n",
       "      <th>Lipoprotein_7.0</th>\n",
       "      <th>Lipoprotein_8.0</th>\n",
       "      <th>Lipoprotein_9.0</th>\n",
       "      <th>Lipoprotein_10.0</th>\n",
       "      <th>Lipoprotein_11.0</th>\n",
       "      <th>Lipoprotein_12.0</th>\n",
       "      <th>Lipoprotein_13.0</th>\n",
       "      <th>Lipoprotein_14.0</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.663496</td>\n",
       "      <td>-0.663496</td>\n",
       "      <td>...</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>0.890310</td>\n",
       "      <td>0.890310</td>\n",
       "      <td>0.890310</td>\n",
       "      <td>0.890310</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>1.915973</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.476681</td>\n",
       "      <td>-0.476681</td>\n",
       "      <td>-0.269572</td>\n",
       "      <td>-0.269572</td>\n",
       "      <td>-0.269572</td>\n",
       "      <td>-0.536878</td>\n",
       "      <td>-0.536878</td>\n",
       "      <td>-0.536878</td>\n",
       "      <td>0.436677</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>-0.973528</td>\n",
       "      <td>-0.973528</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021384</td>\n",
       "      <td>0.021384</td>\n",
       "      <td>-0.338727</td>\n",
       "      <td>-0.338727</td>\n",
       "      <td>-0.338727</td>\n",
       "      <td>-0.338727</td>\n",
       "      <td>-0.893048</td>\n",
       "      <td>-0.893048</td>\n",
       "      <td>0.021384</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>...</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>-0.205791</td>\n",
       "      <td>-0.205791</td>\n",
       "      <td>-0.205791</td>\n",
       "      <td>0.850895</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.672452</td>\n",
       "      <td>2.672452</td>\n",
       "      <td>2.672452</td>\n",
       "      <td>2.672452</td>\n",
       "      <td>2.672452</td>\n",
       "      <td>1.946977</td>\n",
       "      <td>1.946977</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.520037</td>\n",
       "      <td>-0.520037</td>\n",
       "      <td>-1.144231</td>\n",
       "      <td>-1.144231</td>\n",
       "      <td>-1.144231</td>\n",
       "      <td>-1.144231</td>\n",
       "      <td>-0.547628</td>\n",
       "      <td>-0.547628</td>\n",
       "      <td>-0.547628</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>295</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>-0.520881</td>\n",
       "      <td>-0.520881</td>\n",
       "      <td>-0.520881</td>\n",
       "      <td>-0.520881</td>\n",
       "      <td>-0.266654</td>\n",
       "      <td>-0.266654</td>\n",
       "      <td>-0.961127</td>\n",
       "      <td>...</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>1.252930</td>\n",
       "      <td>1.252930</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>296</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>0.725449</td>\n",
       "      <td>...</td>\n",
       "      <td>0.189078</td>\n",
       "      <td>0.189078</td>\n",
       "      <td>0.607954</td>\n",
       "      <td>0.607954</td>\n",
       "      <td>1.483688</td>\n",
       "      <td>1.483688</td>\n",
       "      <td>1.483688</td>\n",
       "      <td>0.162921</td>\n",
       "      <td>0.162921</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>297</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>0.756452</td>\n",
       "      <td>0.756452</td>\n",
       "      <td>...</td>\n",
       "      <td>0.805030</td>\n",
       "      <td>0.805030</td>\n",
       "      <td>1.547111</td>\n",
       "      <td>1.547111</td>\n",
       "      <td>1.547111</td>\n",
       "      <td>1.547111</td>\n",
       "      <td>1.504829</td>\n",
       "      <td>1.504829</td>\n",
       "      <td>1.504829</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>298</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-0.440273</td>\n",
       "      <td>-0.440273</td>\n",
       "      <td>-0.440273</td>\n",
       "      <td>-0.837114</td>\n",
       "      <td>-0.837114</td>\n",
       "      <td>-0.837114</td>\n",
       "      <td>-0.781308</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.356643</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>-0.613200</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>299</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-0.303858</td>\n",
       "      <td>-0.303858</td>\n",
       "      <td>-0.303858</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.475247</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>300 rows × 60 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  gender  CKD(t=0)  Glucose_1.0  Glucose_2.0  Glucose_3.0  \\\n",
       "0      0       1       3.0    -0.564285    -0.564285    -0.564285   \n",
       "1      1       0       4.0     1.915973     1.915973     1.915973   \n",
       "2      2       0       4.0     0.216996     0.216996     0.216996   \n",
       "3      3       1       1.0    -0.570486    -0.570486    -0.570486   \n",
       "4      4       0       3.0     2.672452     2.672452     2.672452   \n",
       "..   ...     ...       ...          ...          ...          ...   \n",
       "295  295       0       4.0    -0.520881    -0.520881    -0.520881   \n",
       "296  296       0       4.0     0.725449     0.725449     0.725449   \n",
       "297  297       1       3.0     1.791960     1.791960     1.791960   \n",
       "298  298       0       3.0    -0.440273    -0.440273    -0.440273   \n",
       "299  299       1       2.0    -0.303858    -0.303858    -0.303858   \n",
       "\n",
       "     Glucose_4.0  Glucose_5.0  Glucose_6.0  Glucose_7.0  ...  Lipoprotein_6.0  \\\n",
       "0      -0.564285    -0.564285    -0.663496    -0.663496  ...         2.556857   \n",
       "1       1.915973     1.915973     1.915973     1.915973  ...        -0.476681   \n",
       "2       0.216996     0.216996    -0.973528    -0.973528  ...         0.021384   \n",
       "3      -0.570486    -0.570486    -0.570486    -0.570486  ...         0.533065   \n",
       "4       2.672452     2.672452     1.946977     1.946977  ...        -0.520037   \n",
       "..           ...          ...          ...          ...  ...              ...   \n",
       "295    -0.520881    -0.266654    -0.266654    -0.961127  ...         0.746266   \n",
       "296     0.725449     0.725449     0.725449     0.725449  ...         0.189078   \n",
       "297     1.791960     1.791960     0.756452     0.756452  ...         0.805030   \n",
       "298    -0.837114    -0.837114    -0.837114    -0.781308  ...        -0.356643   \n",
       "299    -0.341062    -0.341062    -0.341062    -0.341062  ...        -0.475247   \n",
       "\n",
       "     Lipoprotein_7.0  Lipoprotein_8.0  Lipoprotein_9.0  Lipoprotein_10.0  \\\n",
       "0           2.556857         2.556857         2.556857          2.556857   \n",
       "1          -0.476681        -0.269572        -0.269572         -0.269572   \n",
       "2           0.021384        -0.338727        -0.338727         -0.338727   \n",
       "3           0.533065         0.533065         0.533065          0.533065   \n",
       "4          -0.520037        -1.144231        -1.144231         -1.144231   \n",
       "..               ...              ...              ...               ...   \n",
       "295         0.746266         0.746266         0.746266          0.746266   \n",
       "296         0.189078         0.607954         0.607954          1.483688   \n",
       "297         0.805030         1.547111         1.547111          1.547111   \n",
       "298         0.597205         0.597205         0.597205          0.597205   \n",
       "299        -0.719980        -0.719980        -0.719980         -0.719980   \n",
       "\n",
       "     Lipoprotein_11.0  Lipoprotein_12.0  Lipoprotein_13.0  Lipoprotein_14.0  \\\n",
       "0            0.890310          0.890310          0.890310          0.890310   \n",
       "1           -0.536878         -0.536878         -0.536878          0.436677   \n",
       "2           -0.338727         -0.893048         -0.893048          0.021384   \n",
       "3           -0.205791         -0.205791         -0.205791          0.850895   \n",
       "4           -1.144231         -0.547628         -0.547628         -0.547628   \n",
       "..                ...               ...               ...               ...   \n",
       "295          0.746266          0.746266          1.252930          1.252930   \n",
       "296          1.483688          1.483688          0.162921          0.162921   \n",
       "297          1.547111          1.504829          1.504829          1.504829   \n",
       "298          0.597205          0.597205          0.597205         -0.613200   \n",
       "299         -0.719980         -0.719980         -0.719980         -0.719980   \n",
       "\n",
       "     target  \n",
       "0         1  \n",
       "1         0  \n",
       "2         1  \n",
       "3         0  \n",
       "4         1  \n",
       "..      ...  \n",
       "295       1  \n",
       "296       0  \n",
       "297       1  \n",
       "298       0  \n",
       "299       0  \n",
       "\n",
       "[300 rows x 60 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scaling of data\n",
    "dframe_temporal_final=dframe_container\n",
    "# dframe_temporal_final=my_internal_func.my_preprocess(dframe_container,'standard',ignore=['id','target','CKD(t=0)'])\n",
    "dframe_temporal_final.to_csv('output/dframe_temporal_final.csv',index=False)\n",
    "dframe_temporal_final"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae32b100",
   "metadata": {},
   "source": [
    "#### <font color='grey'> Advanced Approach(Deep Learning)</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab06c4fb",
   "metadata": {},
   "source": [
    "The recall value of the linear model(s) are quite poor. Let us try to improve it using the identified features but with the longitudinal data nature intact. We will build a RNN. But before that we need to standardise the observation period across patients to some extent. By visual inspection of the file 'Window.csv' produced by the code we can come to a cutoff period."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1d1bc235",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(170, 60) (130, 60)\n",
      "(170, 56)\n",
      "(130, 56)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Glucose_1.0</th>\n",
       "      <th>Glucose_2.0</th>\n",
       "      <th>Glucose_3.0</th>\n",
       "      <th>Glucose_4.0</th>\n",
       "      <th>Glucose_5.0</th>\n",
       "      <th>Glucose_6.0</th>\n",
       "      <th>Glucose_7.0</th>\n",
       "      <th>Glucose_8.0</th>\n",
       "      <th>Glucose_9.0</th>\n",
       "      <th>Glucose_10.0</th>\n",
       "      <th>...</th>\n",
       "      <th>Lipoprotein_5.0</th>\n",
       "      <th>Lipoprotein_6.0</th>\n",
       "      <th>Lipoprotein_7.0</th>\n",
       "      <th>Lipoprotein_8.0</th>\n",
       "      <th>Lipoprotein_9.0</th>\n",
       "      <th>Lipoprotein_10.0</th>\n",
       "      <th>Lipoprotein_11.0</th>\n",
       "      <th>Lipoprotein_12.0</th>\n",
       "      <th>Lipoprotein_13.0</th>\n",
       "      <th>Lipoprotein_14.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.564285</td>\n",
       "      <td>-0.663496</td>\n",
       "      <td>-0.663496</td>\n",
       "      <td>-0.663496</td>\n",
       "      <td>0.123986</td>\n",
       "      <td>0.123986</td>\n",
       "      <td>...</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>2.556857</td>\n",
       "      <td>0.890310</td>\n",
       "      <td>0.890310</td>\n",
       "      <td>0.890310</td>\n",
       "      <td>0.890310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.216996</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>0.216996</td>\n",
       "      <td>-0.973528</td>\n",
       "      <td>-0.973528</td>\n",
       "      <td>-0.973528</td>\n",
       "      <td>-0.973528</td>\n",
       "      <td>-0.973528</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021384</td>\n",
       "      <td>0.021384</td>\n",
       "      <td>0.021384</td>\n",
       "      <td>-0.338727</td>\n",
       "      <td>-0.338727</td>\n",
       "      <td>-0.338727</td>\n",
       "      <td>-0.338727</td>\n",
       "      <td>-0.893048</td>\n",
       "      <td>-0.893048</td>\n",
       "      <td>0.021384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.570486</td>\n",
       "      <td>-0.793709</td>\n",
       "      <td>0.458821</td>\n",
       "      <td>0.458821</td>\n",
       "      <td>...</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>0.533065</td>\n",
       "      <td>-0.205791</td>\n",
       "      <td>-0.205791</td>\n",
       "      <td>-0.205791</td>\n",
       "      <td>0.850895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>-0.012428</td>\n",
       "      <td>-0.012428</td>\n",
       "      <td>-0.012428</td>\n",
       "      <td>-0.012428</td>\n",
       "      <td>-0.012428</td>\n",
       "      <td>-0.012428</td>\n",
       "      <td>0.465022</td>\n",
       "      <td>0.465022</td>\n",
       "      <td>0.465022</td>\n",
       "      <td>1.345514</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.745133</td>\n",
       "      <td>-1.745133</td>\n",
       "      <td>-1.745133</td>\n",
       "      <td>-1.360298</td>\n",
       "      <td>-1.360298</td>\n",
       "      <td>-1.360298</td>\n",
       "      <td>-1.454894</td>\n",
       "      <td>-1.454894</td>\n",
       "      <td>-1.454894</td>\n",
       "      <td>-1.243127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>-0.725502</td>\n",
       "      <td>-0.725502</td>\n",
       "      <td>-0.725502</td>\n",
       "      <td>-0.725502</td>\n",
       "      <td>-0.725502</td>\n",
       "      <td>-0.725502</td>\n",
       "      <td>-0.725502</td>\n",
       "      <td>-0.595289</td>\n",
       "      <td>-0.595289</td>\n",
       "      <td>-0.595289</td>\n",
       "      <td>...</td>\n",
       "      <td>2.020810</td>\n",
       "      <td>2.020810</td>\n",
       "      <td>2.020810</td>\n",
       "      <td>2.020810</td>\n",
       "      <td>2.020810</td>\n",
       "      <td>1.642782</td>\n",
       "      <td>1.642782</td>\n",
       "      <td>1.642782</td>\n",
       "      <td>1.642782</td>\n",
       "      <td>1.642782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>292</th>\n",
       "      <td>0.861863</td>\n",
       "      <td>0.861863</td>\n",
       "      <td>0.861863</td>\n",
       "      <td>0.861863</td>\n",
       "      <td>0.861863</td>\n",
       "      <td>0.644841</td>\n",
       "      <td>0.644841</td>\n",
       "      <td>0.644841</td>\n",
       "      <td>0.644841</td>\n",
       "      <td>0.644841</td>\n",
       "      <td>...</td>\n",
       "      <td>0.221685</td>\n",
       "      <td>0.153963</td>\n",
       "      <td>0.153963</td>\n",
       "      <td>0.153963</td>\n",
       "      <td>-0.021614</td>\n",
       "      <td>-0.021614</td>\n",
       "      <td>0.441694</td>\n",
       "      <td>0.441694</td>\n",
       "      <td>0.441694</td>\n",
       "      <td>0.441694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>-0.520881</td>\n",
       "      <td>-0.520881</td>\n",
       "      <td>-0.520881</td>\n",
       "      <td>-0.520881</td>\n",
       "      <td>-0.266654</td>\n",
       "      <td>-0.266654</td>\n",
       "      <td>-0.961127</td>\n",
       "      <td>-0.961127</td>\n",
       "      <td>-0.961127</td>\n",
       "      <td>-0.961127</td>\n",
       "      <td>...</td>\n",
       "      <td>1.333194</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>0.746266</td>\n",
       "      <td>1.252930</td>\n",
       "      <td>1.252930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>1.791960</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>1.791960</td>\n",
       "      <td>0.756452</td>\n",
       "      <td>0.756452</td>\n",
       "      <td>0.756452</td>\n",
       "      <td>0.458821</td>\n",
       "      <td>0.458821</td>\n",
       "      <td>...</td>\n",
       "      <td>0.805030</td>\n",
       "      <td>0.805030</td>\n",
       "      <td>0.805030</td>\n",
       "      <td>1.547111</td>\n",
       "      <td>1.547111</td>\n",
       "      <td>1.547111</td>\n",
       "      <td>1.547111</td>\n",
       "      <td>1.504829</td>\n",
       "      <td>1.504829</td>\n",
       "      <td>1.504829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>-0.440273</td>\n",
       "      <td>-0.440273</td>\n",
       "      <td>-0.440273</td>\n",
       "      <td>-0.837114</td>\n",
       "      <td>-0.837114</td>\n",
       "      <td>-0.837114</td>\n",
       "      <td>-0.781308</td>\n",
       "      <td>-0.781308</td>\n",
       "      <td>-0.781308</td>\n",
       "      <td>-0.272855</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.356643</td>\n",
       "      <td>-0.356643</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>0.597205</td>\n",
       "      <td>-0.613200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>-0.303858</td>\n",
       "      <td>-0.303858</td>\n",
       "      <td>-0.303858</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>-0.341062</td>\n",
       "      <td>-0.675897</td>\n",
       "      <td>-0.675897</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.475247</td>\n",
       "      <td>-0.475247</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "      <td>-0.719980</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>170 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Glucose_1.0  Glucose_2.0  Glucose_3.0  Glucose_4.0  Glucose_5.0  \\\n",
       "0      -0.564285    -0.564285    -0.564285    -0.564285    -0.564285   \n",
       "2       0.216996     0.216996     0.216996     0.216996     0.216996   \n",
       "3      -0.570486    -0.570486    -0.570486    -0.570486    -0.570486   \n",
       "6      -0.012428    -0.012428    -0.012428    -0.012428    -0.012428   \n",
       "8      -0.725502    -0.725502    -0.725502    -0.725502    -0.725502   \n",
       "..           ...          ...          ...          ...          ...   \n",
       "292     0.861863     0.861863     0.861863     0.861863     0.861863   \n",
       "295    -0.520881    -0.520881    -0.520881    -0.520881    -0.266654   \n",
       "297     1.791960     1.791960     1.791960     1.791960     1.791960   \n",
       "298    -0.440273    -0.440273    -0.440273    -0.837114    -0.837114   \n",
       "299    -0.303858    -0.303858    -0.303858    -0.341062    -0.341062   \n",
       "\n",
       "     Glucose_6.0  Glucose_7.0  Glucose_8.0  Glucose_9.0  Glucose_10.0  ...  \\\n",
       "0      -0.663496    -0.663496    -0.663496     0.123986      0.123986  ...   \n",
       "2      -0.973528    -0.973528    -0.973528    -0.973528     -0.973528  ...   \n",
       "3      -0.570486    -0.570486    -0.793709     0.458821      0.458821  ...   \n",
       "6      -0.012428     0.465022     0.465022     0.465022      1.345514  ...   \n",
       "8      -0.725502    -0.725502    -0.595289    -0.595289     -0.595289  ...   \n",
       "..           ...          ...          ...          ...           ...  ...   \n",
       "292     0.644841     0.644841     0.644841     0.644841      0.644841  ...   \n",
       "295    -0.266654    -0.961127    -0.961127    -0.961127     -0.961127  ...   \n",
       "297     0.756452     0.756452     0.756452     0.458821      0.458821  ...   \n",
       "298    -0.837114    -0.781308    -0.781308    -0.781308     -0.272855  ...   \n",
       "299    -0.341062    -0.341062    -0.341062    -0.675897     -0.675897  ...   \n",
       "\n",
       "     Lipoprotein_5.0  Lipoprotein_6.0  Lipoprotein_7.0  Lipoprotein_8.0  \\\n",
       "0           2.556857         2.556857         2.556857         2.556857   \n",
       "2           0.021384         0.021384         0.021384        -0.338727   \n",
       "3           0.533065         0.533065         0.533065         0.533065   \n",
       "6          -1.745133        -1.745133        -1.745133        -1.360298   \n",
       "8           2.020810         2.020810         2.020810         2.020810   \n",
       "..               ...              ...              ...              ...   \n",
       "292         0.221685         0.153963         0.153963         0.153963   \n",
       "295         1.333194         0.746266         0.746266         0.746266   \n",
       "297         0.805030         0.805030         0.805030         1.547111   \n",
       "298        -0.356643        -0.356643         0.597205         0.597205   \n",
       "299        -0.475247        -0.475247        -0.719980        -0.719980   \n",
       "\n",
       "     Lipoprotein_9.0  Lipoprotein_10.0  Lipoprotein_11.0  Lipoprotein_12.0  \\\n",
       "0           2.556857          2.556857          0.890310          0.890310   \n",
       "2          -0.338727         -0.338727         -0.338727         -0.893048   \n",
       "3           0.533065          0.533065         -0.205791         -0.205791   \n",
       "6          -1.360298         -1.360298         -1.454894         -1.454894   \n",
       "8           2.020810          1.642782          1.642782          1.642782   \n",
       "..               ...               ...               ...               ...   \n",
       "292        -0.021614         -0.021614          0.441694          0.441694   \n",
       "295         0.746266          0.746266          0.746266          0.746266   \n",
       "297         1.547111          1.547111          1.547111          1.504829   \n",
       "298         0.597205          0.597205          0.597205          0.597205   \n",
       "299        -0.719980         -0.719980         -0.719980         -0.719980   \n",
       "\n",
       "     Lipoprotein_13.0  Lipoprotein_14.0  \n",
       "0            0.890310          0.890310  \n",
       "2           -0.893048          0.021384  \n",
       "3           -0.205791          0.850895  \n",
       "6           -1.454894         -1.243127  \n",
       "8            1.642782          1.642782  \n",
       "..                ...               ...  \n",
       "292          0.441694          0.441694  \n",
       "295          1.252930          1.252930  \n",
       "297          1.504829          1.504829  \n",
       "298          0.597205         -0.613200  \n",
       "299         -0.719980         -0.719980  \n",
       "\n",
       "[170 rows x 56 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train Test split with imbalanced retained .\n",
    "\n",
    "minority_id=dframe_temporal_final[dframe_temporal_final.target==1]['id'].unique()\n",
    "majority_id=dframe_temporal_final[dframe_temporal_final.target==0]['id'].unique()\n",
    "len(minority_id)\n",
    "\n",
    "minority_test_id=pd.Series(minority_id).sample(frac=0.10,random_state=0)\n",
    "majority_test_id=pd.Series(majority_id).sample(frac=0.60,random_state=0)\n",
    "\n",
    "dframe_test=dframe_temporal_final[dframe_temporal_final.id.isin(minority_test_id) | dframe_temporal_final.id.isin(majority_test_id)]\n",
    "dframe_train=dframe_temporal_final[~dframe_temporal_final.id.isin(dframe_test.id)]\n",
    "print(dframe_train.shape,dframe_test.shape)\n",
    "\n",
    "\n",
    "dframe_train_X_time=dframe_train.filter(like=\"_\")\n",
    "dframe_train_static=dframe_train[['gender','CKD(t=0)']]\n",
    "dframe_train_Y=dframe_train['target']\n",
    "print(dframe_train_X_time.shape)\n",
    "\n",
    "dframe_test_X_time=dframe_test.filter(like=\"_\")\n",
    "dframe_test_static=dframe_test[['gender','CKD(t=0)']]\n",
    "dframe_test_Y=dframe_test['target']\n",
    "print(dframe_test_X_time.shape)\n",
    "\n",
    "dframe_train_X_time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac4af12e",
   "metadata": {},
   "source": [
    "### RNN with LSTM layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6c091b23",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "# Import `Dense` from `keras.layers`\n",
    "from keras.layers import Dense, Dropout\n",
    "from keras.layers import LSTM\n",
    "from keras.layers import Input\n",
    "from keras.models import Model\n",
    "import keras\n",
    "import tensorflow\n",
    "\n",
    "\n",
    "# tensorflow.random.set_seed(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bc36d63e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(170, 14, 4)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# reshape input to be 3D [samples, timesteps, features]\n",
    "dframe_train_X_time = dframe_train_X_time.to_numpy().reshape((dframe_train_X_time.shape[0], 14, 4))\n",
    "dframe_test_X_time=dframe_test_X_time.to_numpy().reshape((dframe_test_X_time.shape[0], 14, 4))\n",
    "dframe_train_X_time.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b0a0a2af",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Citation from \n",
    "import keras.backend as K\n",
    "from keras.callbacks import ReduceLROnPlateau,ModelCheckpoint\n",
    "from tensorflow.keras.optimizers import RMSprop\n",
    "from keras.callbacks import EarlyStopping\n",
    "\n",
    "main_input = Input(shape=(dframe_train_X_time.shape[1], dframe_train_X_time.shape[2]), name='main_input')\n",
    "\n",
    "lstm_out = LSTM(16, dropout=0.25, recurrent_dropout=0.2)(main_input)\n",
    "\n",
    "auxiliary_output = Dense(1, activation='sigmoid', name='aux_output')(lstm_out)\n",
    "\n",
    "auxiliary_input = Input(shape=(2,), name='aux_input')\n",
    "\n",
    "x = keras.layers.concatenate([lstm_out, auxiliary_input])\n",
    "\n",
    "\n",
    "x = Dense(4, activation='relu')(x)\n",
    "x= Dropout(0.25)(x)\n",
    "\n",
    "\n",
    "\n",
    "# And finally we add the main logistic regression layer\n",
    "main_output = Dense(1, activation='sigmoid', name='main_output')(x)\n",
    "#This defines a model with two inputs and two outputs:\n",
    "model = Model(inputs=[main_input, auxiliary_input], outputs=[main_output, auxiliary_output])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3448dbc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "__________________________________________________________________________________________________\n",
      " Layer (type)                   Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      " main_input (InputLayer)        [(None, 14, 4)]      0           []                               \n",
      "                                                                                                  \n",
      " lstm (LSTM)                    (None, 16)           1344        ['main_input[0][0]']             \n",
      "                                                                                                  \n",
      " aux_input (InputLayer)         [(None, 2)]          0           []                               \n",
      "                                                                                                  \n",
      " concatenate (Concatenate)      (None, 18)           0           ['lstm[0][0]',                   \n",
      "                                                                  'aux_input[0][0]']              \n",
      "                                                                                                  \n",
      " dense (Dense)                  (None, 4)            76          ['concatenate[0][0]']            \n",
      "                                                                                                  \n",
      " dropout (Dropout)              (None, 4)            0           ['dense[0][0]']                  \n",
      "                                                                                                  \n",
      " main_output (Dense)            (None, 1)            5           ['dropout[0][0]']                \n",
      "                                                                                                  \n",
      " aux_output (Dense)             (None, 1)            17          ['lstm[0][0]']                   \n",
      "                                                                                                  \n",
      "==================================================================================================\n",
      "Total params: 1,442\n",
      "Trainable params: 1,442\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "577686ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "def recall_m(y_true, y_pred):\n",
    "    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n",
    "    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n",
    "    recall = true_positives / (possible_positives + K.epsilon())\n",
    "    return recall\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2899394b",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(optimizer='adam',\n",
    "              loss={'main_output': 'binary_crossentropy', 'aux_output': 'binary_crossentropy'},loss_weights={'main_output': 1., 'aux_output': 0.10},\n",
    "              metrics=['acc',recall_m])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b289e096",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/80\n",
      "1/6 [====>.........................] - ETA: 9s - loss: 1.0785 - main_output_loss: 1.0123 - aux_output_loss: 0.6617 - main_output_acc: 0.6562 - main_output_recall_m: 1.0000 - aux_output_acc: 0.6250 - aux_output_recall_m: 0.7500WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 2s 94ms/step - loss: 1.2891 - main_output_loss: 1.2206 - aux_output_loss: 0.6854 - main_output_acc: 0.5280 - main_output_recall_m: 0.9449 - aux_output_acc: 0.5342 - aux_output_recall_m: 0.5036 - val_loss: 1.3344 - val_main_output_loss: 1.2573 - val_aux_output_loss: 0.7704 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.2222 - val_aux_output_recall_m: 0.2500\n",
      "Epoch 2/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 1.4539 - main_output_loss: 1.3821 - aux_output_loss: 0.7182 - main_output_acc: 0.3438 - main_output_recall_m: 0.7857 - aux_output_acc: 0.4375 - aux_output_recall_m: 0.5000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 10ms/step - loss: 1.2311 - main_output_loss: 1.1622 - aux_output_loss: 0.6885 - main_output_acc: 0.4907 - main_output_recall_m: 0.9170 - aux_output_acc: 0.5528 - aux_output_recall_m: 0.4808 - val_loss: 1.2933 - val_main_output_loss: 1.2171 - val_aux_output_loss: 0.7619 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.2222 - val_aux_output_recall_m: 0.2500\n",
      "Epoch 3/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 1.0193 - main_output_loss: 0.9499 - aux_output_loss: 0.6937 - main_output_acc: 0.6250 - main_output_recall_m: 0.9524 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.6190WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 11ms/step - loss: 1.2105 - main_output_loss: 1.1407 - aux_output_loss: 0.6987 - main_output_acc: 0.5404 - main_output_recall_m: 0.7924 - aux_output_acc: 0.4845 - aux_output_recall_m: 0.4305 - val_loss: 1.2550 - val_main_output_loss: 1.1796 - val_aux_output_loss: 0.7538 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.1111 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 4/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 1.0069 - main_output_loss: 0.9357 - aux_output_loss: 0.7120 - main_output_acc: 0.5938 - main_output_recall_m: 0.9444 - aux_output_acc: 0.4688 - aux_output_recall_m: 0.5000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 11ms/step - loss: 1.1176 - main_output_loss: 1.0488 - aux_output_loss: 0.6885 - main_output_acc: 0.5342 - main_output_recall_m: 0.9389 - aux_output_acc: 0.5528 - aux_output_recall_m: 0.6697 - val_loss: 1.2163 - val_main_output_loss: 1.1417 - val_aux_output_loss: 0.7459 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.2222 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 5/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.9968 - main_output_loss: 0.9272 - aux_output_loss: 0.6965 - main_output_acc: 0.6250 - main_output_recall_m: 0.9000 - aux_output_acc: 0.4375 - aux_output_recall_m: 0.4500WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 11ms/step - loss: 1.1691 - main_output_loss: 1.0998 - aux_output_loss: 0.6930 - main_output_acc: 0.5093 - main_output_recall_m: 0.7526 - aux_output_acc: 0.4534 - aux_output_recall_m: 0.3553 - val_loss: 1.1828 - val_main_output_loss: 1.1088 - val_aux_output_loss: 0.7397 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.1111 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 6/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 1.3861 - main_output_loss: 1.3168 - aux_output_loss: 0.6927 - main_output_acc: 0.3750 - main_output_recall_m: 0.8000 - aux_output_acc: 0.5625 - aux_output_recall_m: 0.8000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 1.0316 - main_output_loss: 0.9636 - aux_output_loss: 0.6800 - main_output_acc: 0.5528 - main_output_recall_m: 0.7924 - aux_output_acc: 0.5466 - aux_output_recall_m: 0.4450 - val_loss: 1.1516 - val_main_output_loss: 1.0780 - val_aux_output_loss: 0.7359 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.1111 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 7/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 1.0733 - main_output_loss: 1.0068 - aux_output_loss: 0.6657 - main_output_acc: 0.5625 - main_output_recall_m: 1.0000 - aux_output_acc: 0.6562 - aux_output_recall_m: 0.5385WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 1.0670 - main_output_loss: 0.9988 - aux_output_loss: 0.6823 - main_output_acc: 0.5404 - main_output_recall_m: 0.9165 - aux_output_acc: 0.5963 - aux_output_recall_m: 0.6085 - val_loss: 1.1245 - val_main_output_loss: 1.0513 - val_aux_output_loss: 0.7319 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.1111 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 8/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.8079 - main_output_loss: 0.7387 - aux_output_loss: 0.6929 - main_output_acc: 0.5938 - main_output_recall_m: 0.9500 - aux_output_acc: 0.5625 - aux_output_recall_m: 0.4500WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 1.0299 - main_output_loss: 0.9614 - aux_output_loss: 0.6845 - main_output_acc: 0.5466 - main_output_recall_m: 0.9519 - aux_output_acc: 0.5963 - aux_output_recall_m: 0.6015 - val_loss: 1.1003 - val_main_output_loss: 1.0273 - val_aux_output_loss: 0.7298 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.1111 - val_aux_output_recall_m: 0.0000e+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 9/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 1.1078 - main_output_loss: 1.0369 - aux_output_loss: 0.7086 - main_output_acc: 0.4688 - main_output_recall_m: 0.7778 - aux_output_acc: 0.3750 - aux_output_recall_m: 0.3333WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 1.0361 - main_output_loss: 0.9660 - aux_output_loss: 0.7010 - main_output_acc: 0.5404 - main_output_recall_m: 0.7615 - aux_output_acc: 0.4845 - aux_output_recall_m: 0.3500 - val_loss: 1.0752 - val_main_output_loss: 1.0026 - val_aux_output_loss: 0.7255 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.1111 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 10/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.9457 - main_output_loss: 0.8787 - aux_output_loss: 0.6695 - main_output_acc: 0.5312 - main_output_recall_m: 0.8947 - aux_output_acc: 0.6562 - aux_output_recall_m: 0.6316WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 1.0799 - main_output_loss: 1.0119 - aux_output_loss: 0.6802 - main_output_acc: 0.4907 - main_output_recall_m: 0.7364 - aux_output_acc: 0.5776 - aux_output_recall_m: 0.4082 - val_loss: 1.0424 - val_main_output_loss: 0.9704 - val_aux_output_loss: 0.7197 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.2222 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 11/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.9839 - main_output_loss: 0.9146 - aux_output_loss: 0.6936 - main_output_acc: 0.6250 - main_output_recall_m: 1.0000 - aux_output_acc: 0.4688 - aux_output_recall_m: 0.4706WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.9619 - main_output_loss: 0.8933 - aux_output_loss: 0.6860 - main_output_acc: 0.5217 - main_output_recall_m: 0.7112 - aux_output_acc: 0.5528 - aux_output_recall_m: 0.3863 - val_loss: 1.0073 - val_main_output_loss: 0.9359 - val_aux_output_loss: 0.7141 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 12/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 1.1103 - main_output_loss: 1.0414 - aux_output_loss: 0.6889 - main_output_acc: 0.4375 - main_output_recall_m: 0.8000 - aux_output_acc: 0.5625 - aux_output_recall_m: 0.4000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 1.0014 - main_output_loss: 0.9327 - aux_output_loss: 0.6863 - main_output_acc: 0.5093 - main_output_recall_m: 0.7282 - aux_output_acc: 0.5652 - aux_output_recall_m: 0.3344 - val_loss: 0.9772 - val_main_output_loss: 0.9061 - val_aux_output_loss: 0.7109 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 13/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.8993 - main_output_loss: 0.8287 - aux_output_loss: 0.7062 - main_output_acc: 0.5000 - main_output_recall_m: 0.8333 - aux_output_acc: 0.4375 - aux_output_recall_m: 0.2222WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.9515 - main_output_loss: 0.8828 - aux_output_loss: 0.6875 - main_output_acc: 0.5031 - main_output_recall_m: 0.7361 - aux_output_acc: 0.5155 - aux_output_recall_m: 0.2318 - val_loss: 0.9521 - val_main_output_loss: 0.8810 - val_aux_output_loss: 0.7109 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 14/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.8013 - main_output_loss: 0.7309 - aux_output_loss: 0.7036 - main_output_acc: 0.6562 - main_output_recall_m: 1.0000 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.2105WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.9236 - main_output_loss: 0.8547 - aux_output_loss: 0.6890 - main_output_acc: 0.5217 - main_output_recall_m: 0.9003 - aux_output_acc: 0.5466 - aux_output_recall_m: 0.1789 - val_loss: 0.9190 - val_main_output_loss: 0.8483 - val_aux_output_loss: 0.7071 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 15/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.9185 - main_output_loss: 0.8503 - aux_output_loss: 0.6825 - main_output_acc: 0.3125 - main_output_recall_m: 0.6000 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.3333WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.8353 - main_output_loss: 0.7660 - aux_output_loss: 0.6933 - main_output_acc: 0.5155 - main_output_recall_m: 0.6850 - aux_output_acc: 0.5466 - aux_output_recall_m: 0.2411 - val_loss: 0.8920 - val_main_output_loss: 0.8217 - val_aux_output_loss: 0.7030 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 16/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.8920 - main_output_loss: 0.8216 - aux_output_loss: 0.7049 - main_output_acc: 0.5000 - main_output_recall_m: 0.9375 - aux_output_acc: 0.4688 - aux_output_recall_m: 0.1250WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.8343 - main_output_loss: 0.7647 - aux_output_loss: 0.6964 - main_output_acc: 0.5528 - main_output_recall_m: 0.8900 - aux_output_acc: 0.5155 - aux_output_recall_m: 0.1502 - val_loss: 0.8657 - val_main_output_loss: 0.7957 - val_aux_output_loss: 0.7000 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 17/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.8235 - main_output_loss: 0.7526 - aux_output_loss: 0.7086 - main_output_acc: 0.5000 - main_output_recall_m: 0.7778 - aux_output_acc: 0.4688 - aux_output_recall_m: 0.0556WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.8261 - main_output_loss: 0.7562 - aux_output_loss: 0.6987 - main_output_acc: 0.5031 - main_output_recall_m: 0.6653 - aux_output_acc: 0.5217 - aux_output_recall_m: 0.1323 - val_loss: 0.8481 - val_main_output_loss: 0.7781 - val_aux_output_loss: 0.6999 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 18/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.8671 - main_output_loss: 0.7961 - aux_output_loss: 0.7097 - main_output_acc: 0.4688 - main_output_recall_m: 0.7222 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.1667WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.8125 - main_output_loss: 0.7422 - aux_output_loss: 0.7027 - main_output_acc: 0.4907 - main_output_recall_m: 0.7973 - aux_output_acc: 0.4907 - aux_output_recall_m: 0.0990 - val_loss: 0.8350 - val_main_output_loss: 0.7647 - val_aux_output_loss: 0.7034 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 1.0000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 19/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.8252 - main_output_loss: 0.7552 - aux_output_loss: 0.7002 - main_output_acc: 0.4375 - main_output_recall_m: 0.6667 - aux_output_acc: 0.5625 - aux_output_recall_m: 0.2222WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.8290 - main_output_loss: 0.7597 - aux_output_loss: 0.6929 - main_output_acc: 0.4658 - main_output_recall_m: 0.6238 - aux_output_acc: 0.5280 - aux_output_recall_m: 0.1421 - val_loss: 0.8290 - val_main_output_loss: 0.7582 - val_aux_output_loss: 0.7075 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 0.7500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 20/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7971 - main_output_loss: 0.7274 - aux_output_loss: 0.6968 - main_output_acc: 0.4688 - main_output_recall_m: 0.6000 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.0000e+00WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7978 - main_output_loss: 0.7272 - aux_output_loss: 0.7061 - main_output_acc: 0.4907 - main_output_recall_m: 0.7456 - aux_output_acc: 0.5093 - aux_output_recall_m: 0.0935 - val_loss: 0.8197 - val_main_output_loss: 0.7487 - val_aux_output_loss: 0.7104 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 0.7500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 21/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7014 - main_output_loss: 0.6277 - aux_output_loss: 0.7365 - main_output_acc: 0.6250 - main_output_recall_m: 0.6842 - aux_output_acc: 0.4375 - aux_output_recall_m: 0.0526WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7685 - main_output_loss: 0.6985 - aux_output_loss: 0.7000 - main_output_acc: 0.5342 - main_output_recall_m: 0.5600 - aux_output_acc: 0.5280 - aux_output_recall_m: 0.1194 - val_loss: 0.8139 - val_main_output_loss: 0.7429 - val_aux_output_loss: 0.7107 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 0.7500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 22/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7588 - main_output_loss: 0.6888 - aux_output_loss: 0.6998 - main_output_acc: 0.5938 - main_output_recall_m: 0.5882 - aux_output_acc: 0.4688 - aux_output_recall_m: 0.0588WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.8104 - main_output_loss: 0.7400 - aux_output_loss: 0.7038 - main_output_acc: 0.5217 - main_output_recall_m: 0.7123 - aux_output_acc: 0.4845 - aux_output_recall_m: 0.0782 - val_loss: 0.8068 - val_main_output_loss: 0.7359 - val_aux_output_loss: 0.7091 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.7500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 23/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.8122 - main_output_loss: 0.7447 - aux_output_loss: 0.6752 - main_output_acc: 0.4062 - main_output_recall_m: 0.4286 - aux_output_acc: 0.5625 - aux_output_recall_m: 0.1429WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.8073 - main_output_loss: 0.7367 - aux_output_loss: 0.7056 - main_output_acc: 0.4472 - main_output_recall_m: 0.4687 - aux_output_acc: 0.4907 - aux_output_recall_m: 0.1064 - val_loss: 0.7965 - val_main_output_loss: 0.7260 - val_aux_output_loss: 0.7051 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.7500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 24/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7389 - main_output_loss: 0.6670 - aux_output_loss: 0.7196 - main_output_acc: 0.5625 - main_output_recall_m: 0.6000 - aux_output_acc: 0.3750 - aux_output_recall_m: 0.0000e+00WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7713 - main_output_loss: 0.7016 - aux_output_loss: 0.6968 - main_output_acc: 0.5404 - main_output_recall_m: 0.5286 - aux_output_acc: 0.5155 - aux_output_recall_m: 0.1190 - val_loss: 0.7894 - val_main_output_loss: 0.7189 - val_aux_output_loss: 0.7042 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7611 - main_output_loss: 0.6923 - aux_output_loss: 0.6879 - main_output_acc: 0.4688 - main_output_recall_m: 0.4706 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.1176WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7713 - main_output_loss: 0.7001 - aux_output_loss: 0.7115 - main_output_acc: 0.4658 - main_output_recall_m: 0.5811 - aux_output_acc: 0.4783 - aux_output_recall_m: 0.0873 - val_loss: 0.7851 - val_main_output_loss: 0.7145 - val_aux_output_loss: 0.7053 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 26/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7547 - main_output_loss: 0.6830 - aux_output_loss: 0.7177 - main_output_acc: 0.6875 - main_output_recall_m: 0.7059 - aux_output_acc: 0.4062 - aux_output_recall_m: 0.0000e+00WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7741 - main_output_loss: 0.7030 - aux_output_loss: 0.7110 - main_output_acc: 0.4845 - main_output_recall_m: 0.3947 - aux_output_acc: 0.4969 - aux_output_recall_m: 0.0875 - val_loss: 0.7843 - val_main_output_loss: 0.7135 - val_aux_output_loss: 0.7081 - val_main_output_acc: 0.4444 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 27/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7691 - main_output_loss: 0.6985 - aux_output_loss: 0.7059 - main_output_acc: 0.5000 - main_output_recall_m: 0.4706 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.0588WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7726 - main_output_loss: 0.7013 - aux_output_loss: 0.7124 - main_output_acc: 0.4472 - main_output_recall_m: 0.3268 - aux_output_acc: 0.4907 - aux_output_recall_m: 0.0819 - val_loss: 0.7833 - val_main_output_loss: 0.7123 - val_aux_output_loss: 0.7100 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 28/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7735 - main_output_loss: 0.7014 - aux_output_loss: 0.7210 - main_output_acc: 0.4062 - main_output_recall_m: 0.2105 - aux_output_acc: 0.3750 - aux_output_recall_m: 0.0000e+00WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7628 - main_output_loss: 0.6919 - aux_output_loss: 0.7094 - main_output_acc: 0.4969 - main_output_recall_m: 0.2854 - aux_output_acc: 0.4783 - aux_output_recall_m: 0.0614 - val_loss: 0.7817 - val_main_output_loss: 0.7106 - val_aux_output_loss: 0.7112 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 29/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7566 - main_output_loss: 0.6831 - aux_output_loss: 0.7342 - main_output_acc: 0.5938 - main_output_recall_m: 0.5789 - aux_output_acc: 0.3438 - aux_output_recall_m: 0.0000e+00WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7639 - main_output_loss: 0.6943 - aux_output_loss: 0.6958 - main_output_acc: 0.5093 - main_output_recall_m: 0.3530 - aux_output_acc: 0.4845 - aux_output_recall_m: 0.0953 - val_loss: 0.7774 - val_main_output_loss: 0.7065 - val_aux_output_loss: 0.7090 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 30/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7398 - main_output_loss: 0.6700 - aux_output_loss: 0.6975 - main_output_acc: 0.5000 - main_output_recall_m: 0.3684 - aux_output_acc: 0.4688 - aux_output_recall_m: 0.1053WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 14ms/step - loss: 0.7689 - main_output_loss: 0.6979 - aux_output_loss: 0.7096 - main_output_acc: 0.4969 - main_output_recall_m: 0.2868 - aux_output_acc: 0.4845 - aux_output_recall_m: 0.0792 - val_loss: 0.7693 - val_main_output_loss: 0.6991 - val_aux_output_loss: 0.7020 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 31/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7410 - main_output_loss: 0.6694 - aux_output_loss: 0.7161 - main_output_acc: 0.5312 - main_output_recall_m: 0.3500 - aux_output_acc: 0.4688 - aux_output_recall_m: 0.1500WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7460 - main_output_loss: 0.6760 - aux_output_loss: 0.7001 - main_output_acc: 0.5528 - main_output_recall_m: 0.2887 - aux_output_acc: 0.5155 - aux_output_recall_m: 0.0919 - val_loss: 0.7625 - val_main_output_loss: 0.6930 - val_aux_output_loss: 0.6947 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 32/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7659 - main_output_loss: 0.6950 - aux_output_loss: 0.7086 - main_output_acc: 0.5312 - main_output_recall_m: 0.2353 - aux_output_acc: 0.4688 - aux_output_recall_m: 0.0588WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7626 - main_output_loss: 0.6914 - aux_output_loss: 0.7113 - main_output_acc: 0.5342 - main_output_recall_m: 0.2265 - aux_output_acc: 0.4907 - aux_output_recall_m: 0.0768 - val_loss: 0.7583 - val_main_output_loss: 0.6894 - val_aux_output_loss: 0.6894 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 33/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7646 - main_output_loss: 0.6914 - aux_output_loss: 0.7321 - main_output_acc: 0.5000 - main_output_recall_m: 0.1176 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.0588WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7584 - main_output_loss: 0.6870 - aux_output_loss: 0.7144 - main_output_acc: 0.5280 - main_output_recall_m: 0.2105 - aux_output_acc: 0.4907 - aux_output_recall_m: 0.0786 - val_loss: 0.7561 - val_main_output_loss: 0.6875 - val_aux_output_loss: 0.6857 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 34/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7476 - main_output_loss: 0.6759 - aux_output_loss: 0.7165 - main_output_acc: 0.4688 - main_output_recall_m: 0.2000 - aux_output_acc: 0.4688 - aux_output_recall_m: 0.1500WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7613 - main_output_loss: 0.6912 - aux_output_loss: 0.7008 - main_output_acc: 0.4969 - main_output_recall_m: 0.1916 - aux_output_acc: 0.4907 - aux_output_recall_m: 0.0870 - val_loss: 0.7540 - val_main_output_loss: 0.6855 - val_aux_output_loss: 0.6842 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 35/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7846 - main_output_loss: 0.7145 - aux_output_loss: 0.7005 - main_output_acc: 0.4062 - main_output_recall_m: 0.1053 - aux_output_acc: 0.4375 - aux_output_recall_m: 0.1053WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7619 - main_output_loss: 0.6919 - aux_output_loss: 0.7001 - main_output_acc: 0.5404 - main_output_recall_m: 0.1851 - aux_output_acc: 0.5093 - aux_output_recall_m: 0.1054 - val_loss: 0.7540 - val_main_output_loss: 0.6856 - val_aux_output_loss: 0.6847 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 36/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7776 - main_output_loss: 0.7089 - aux_output_loss: 0.6862 - main_output_acc: 0.5000 - main_output_recall_m: 0.0714 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.0714WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7680 - main_output_loss: 0.6975 - aux_output_loss: 0.7051 - main_output_acc: 0.4720 - main_output_recall_m: 0.1171 - aux_output_acc: 0.5155 - aux_output_recall_m: 0.1161 - val_loss: 0.7529 - val_main_output_loss: 0.6844 - val_aux_output_loss: 0.6855 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 37/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7493 - main_output_loss: 0.6811 - aux_output_loss: 0.6822 - main_output_acc: 0.5625 - main_output_recall_m: 0.1765 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.1765WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7694 - main_output_loss: 0.6984 - aux_output_loss: 0.7100 - main_output_acc: 0.4845 - main_output_recall_m: 0.1473 - aux_output_acc: 0.4969 - aux_output_recall_m: 0.1235 - val_loss: 0.7519 - val_main_output_loss: 0.6833 - val_aux_output_loss: 0.6858 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 38/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7699 - main_output_loss: 0.6955 - aux_output_loss: 0.7435 - main_output_acc: 0.4375 - main_output_recall_m: 0.1579 - aux_output_acc: 0.3750 - aux_output_recall_m: 0.0526WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7616 - main_output_loss: 0.6913 - aux_output_loss: 0.7025 - main_output_acc: 0.4720 - main_output_recall_m: 0.1199 - aux_output_acc: 0.4969 - aux_output_recall_m: 0.0849 - val_loss: 0.7491 - val_main_output_loss: 0.6806 - val_aux_output_loss: 0.6845 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 39/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7472 - main_output_loss: 0.6778 - aux_output_loss: 0.6937 - main_output_acc: 0.5938 - main_output_recall_m: 0.2000 - aux_output_acc: 0.5625 - aux_output_recall_m: 0.0667WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7581 - main_output_loss: 0.6871 - aux_output_loss: 0.7098 - main_output_acc: 0.5217 - main_output_recall_m: 0.1417 - aux_output_acc: 0.4907 - aux_output_recall_m: 0.0671 - val_loss: 0.7461 - val_main_output_loss: 0.6777 - val_aux_output_loss: 0.6838 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 40/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7578 - main_output_loss: 0.6904 - aux_output_loss: 0.6742 - main_output_acc: 0.5312 - main_output_recall_m: 0.1250 - aux_output_acc: 0.5625 - aux_output_recall_m: 0.1875WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7653 - main_output_loss: 0.6952 - aux_output_loss: 0.7012 - main_output_acc: 0.4720 - main_output_recall_m: 0.1133 - aux_output_acc: 0.4907 - aux_output_recall_m: 0.0979 - val_loss: 0.7437 - val_main_output_loss: 0.6754 - val_aux_output_loss: 0.6825 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 41/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7624 - main_output_loss: 0.6907 - aux_output_loss: 0.7178 - main_output_acc: 0.4375 - main_output_recall_m: 0.1667 - aux_output_acc: 0.4375 - aux_output_recall_m: 0.1667WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7612 - main_output_loss: 0.6908 - aux_output_loss: 0.7049 - main_output_acc: 0.4907 - main_output_recall_m: 0.1508 - aux_output_acc: 0.4596 - aux_output_recall_m: 0.0847 - val_loss: 0.7407 - val_main_output_loss: 0.6726 - val_aux_output_loss: 0.6809 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.0000e+00\n",
      "Epoch 42/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7584 - main_output_loss: 0.6848 - aux_output_loss: 0.7360 - main_output_acc: 0.5000 - main_output_recall_m: 0.2632 - aux_output_acc: 0.4375 - aux_output_recall_m: 0.2105WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7594 - main_output_loss: 0.6893 - aux_output_loss: 0.7008 - main_output_acc: 0.5155 - main_output_recall_m: 0.1743 - aux_output_acc: 0.5031 - aux_output_recall_m: 0.1118 - val_loss: 0.7383 - val_main_output_loss: 0.6702 - val_aux_output_loss: 0.6807 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.2500 - val_aux_output_acc: 0.6667 - val_aux_output_recall_m: 0.2500\n",
      "Epoch 43/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7562 - main_output_loss: 0.6867 - aux_output_loss: 0.6947 - main_output_acc: 0.4688 - main_output_recall_m: 0.1500 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.2000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7584 - main_output_loss: 0.6892 - aux_output_loss: 0.6921 - main_output_acc: 0.5155 - main_output_recall_m: 0.2807 - aux_output_acc: 0.5404 - aux_output_recall_m: 0.3024 - val_loss: 0.7364 - val_main_output_loss: 0.6683 - val_aux_output_loss: 0.6812 - val_main_output_acc: 0.7778 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.2500\n",
      "Epoch 44/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7436 - main_output_loss: 0.6755 - aux_output_loss: 0.6814 - main_output_acc: 0.5938 - main_output_recall_m: 0.2000 - aux_output_acc: 0.5938 - aux_output_recall_m: 0.2000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7612 - main_output_loss: 0.6903 - aux_output_loss: 0.7091 - main_output_acc: 0.4969 - main_output_recall_m: 0.1300 - aux_output_acc: 0.4783 - aux_output_recall_m: 0.1208 - val_loss: 0.7391 - val_main_output_loss: 0.6706 - val_aux_output_loss: 0.6854 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.2500\n",
      "Epoch 45/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7336 - main_output_loss: 0.6675 - aux_output_loss: 0.6609 - main_output_acc: 0.6875 - main_output_recall_m: 0.5000 - aux_output_acc: 0.6875 - aux_output_recall_m: 0.5000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7469 - main_output_loss: 0.6778 - aux_output_loss: 0.6909 - main_output_acc: 0.5776 - main_output_recall_m: 0.2661 - aux_output_acc: 0.5528 - aux_output_recall_m: 0.1973 - val_loss: 0.7415 - val_main_output_loss: 0.6727 - val_aux_output_loss: 0.6877 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.2500\n",
      "Epoch 46/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7678 - main_output_loss: 0.6953 - aux_output_loss: 0.7250 - main_output_acc: 0.5312 - main_output_recall_m: 0.2667 - aux_output_acc: 0.3750 - aux_output_recall_m: 0.0667WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7657 - main_output_loss: 0.6952 - aux_output_loss: 0.7050 - main_output_acc: 0.4783 - main_output_recall_m: 0.1482 - aux_output_acc: 0.4783 - aux_output_recall_m: 0.1431 - val_loss: 0.7426 - val_main_output_loss: 0.6736 - val_aux_output_loss: 0.6898 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.2500\n",
      "Epoch 47/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7468 - main_output_loss: 0.6771 - aux_output_loss: 0.6966 - main_output_acc: 0.5938 - main_output_recall_m: 0.4737 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.2632WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7499 - main_output_loss: 0.6806 - aux_output_loss: 0.6936 - main_output_acc: 0.5528 - main_output_recall_m: 0.2153 - aux_output_acc: 0.5528 - aux_output_recall_m: 0.2183 - val_loss: 0.7422 - val_main_output_loss: 0.6730 - val_aux_output_loss: 0.6923 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.2500\n",
      "Epoch 48/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7563 - main_output_loss: 0.6887 - aux_output_loss: 0.6765 - main_output_acc: 0.5000 - main_output_recall_m: 0.1667 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.2778WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7631 - main_output_loss: 0.6936 - aux_output_loss: 0.6954 - main_output_acc: 0.4907 - main_output_recall_m: 0.1532 - aux_output_acc: 0.4658 - aux_output_recall_m: 0.2013 - val_loss: 0.7416 - val_main_output_loss: 0.6721 - val_aux_output_loss: 0.6954 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.2500\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 49/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7679 - main_output_loss: 0.6970 - aux_output_loss: 0.7089 - main_output_acc: 0.4688 - main_output_recall_m: 0.2143 - aux_output_acc: 0.4688 - aux_output_recall_m: 0.4286WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7592 - main_output_loss: 0.6895 - aux_output_loss: 0.6970 - main_output_acc: 0.4720 - main_output_recall_m: 0.3385 - aux_output_acc: 0.4845 - aux_output_recall_m: 0.4583 - val_loss: 0.7405 - val_main_output_loss: 0.6708 - val_aux_output_loss: 0.6975 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 0.2500\n",
      "Epoch 50/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7675 - main_output_loss: 0.6973 - aux_output_loss: 0.7024 - main_output_acc: 0.4688 - main_output_recall_m: 0.2353 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.3529WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7553 - main_output_loss: 0.6860 - aux_output_loss: 0.6923 - main_output_acc: 0.5093 - main_output_recall_m: 0.2483 - aux_output_acc: 0.5155 - aux_output_recall_m: 0.3719 - val_loss: 0.7371 - val_main_output_loss: 0.6672 - val_aux_output_loss: 0.6982 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 0.5000\n",
      "Epoch 51/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7682 - main_output_loss: 0.6969 - aux_output_loss: 0.7128 - main_output_acc: 0.4688 - main_output_recall_m: 0.2941 - aux_output_acc: 0.3750 - aux_output_recall_m: 0.1765WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7619 - main_output_loss: 0.6928 - aux_output_loss: 0.6906 - main_output_acc: 0.4783 - main_output_recall_m: 0.2551 - aux_output_acc: 0.5093 - aux_output_recall_m: 0.4973 - val_loss: 0.7355 - val_main_output_loss: 0.6655 - val_aux_output_loss: 0.6994 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 52/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7868 - main_output_loss: 0.7175 - aux_output_loss: 0.6922 - main_output_acc: 0.4062 - main_output_recall_m: 0.2857 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.4286WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 14ms/step - loss: 0.7551 - main_output_loss: 0.6868 - aux_output_loss: 0.6825 - main_output_acc: 0.4534 - main_output_recall_m: 0.2651 - aux_output_acc: 0.5466 - aux_output_recall_m: 0.4587 - val_loss: 0.7379 - val_main_output_loss: 0.6677 - val_aux_output_loss: 0.7027 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.5556 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 53/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7360 - main_output_loss: 0.6688 - aux_output_loss: 0.6724 - main_output_acc: 0.5312 - main_output_recall_m: 0.5833 - aux_output_acc: 0.6875 - aux_output_recall_m: 0.7917WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 14ms/step - loss: 0.7569 - main_output_loss: 0.6891 - aux_output_loss: 0.6781 - main_output_acc: 0.4783 - main_output_recall_m: 0.4630 - aux_output_acc: 0.6087 - aux_output_recall_m: 0.5988 - val_loss: 0.7391 - val_main_output_loss: 0.6685 - val_aux_output_loss: 0.7061 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 54/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7682 - main_output_loss: 0.6987 - aux_output_loss: 0.6949 - main_output_acc: 0.4375 - main_output_recall_m: 0.4737 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.6316WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7637 - main_output_loss: 0.6953 - aux_output_loss: 0.6840 - main_output_acc: 0.4286 - main_output_recall_m: 0.3423 - aux_output_acc: 0.5342 - aux_output_recall_m: 0.7658 - val_loss: 0.7376 - val_main_output_loss: 0.6667 - val_aux_output_loss: 0.7089 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.7500 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 55/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7675 - main_output_loss: 0.6977 - aux_output_loss: 0.6973 - main_output_acc: 0.5625 - main_output_recall_m: 0.4286 - aux_output_acc: 0.4062 - aux_output_recall_m: 0.5714WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7578 - main_output_loss: 0.6890 - aux_output_loss: 0.6883 - main_output_acc: 0.5217 - main_output_recall_m: 0.5293 - aux_output_acc: 0.5155 - aux_output_recall_m: 0.7668 - val_loss: 0.7378 - val_main_output_loss: 0.6666 - val_aux_output_loss: 0.7123 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.7500 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 56/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7562 - main_output_loss: 0.6873 - aux_output_loss: 0.6881 - main_output_acc: 0.5312 - main_output_recall_m: 0.5263 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.5789WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7589 - main_output_loss: 0.6911 - aux_output_loss: 0.6785 - main_output_acc: 0.5404 - main_output_recall_m: 0.4126 - aux_output_acc: 0.5714 - aux_output_recall_m: 0.6605 - val_loss: 0.7388 - val_main_output_loss: 0.6672 - val_aux_output_loss: 0.7155 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.7500 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 0.7500\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 57/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7836 - main_output_loss: 0.7155 - aux_output_loss: 0.6814 - main_output_acc: 0.4375 - main_output_recall_m: 0.3529 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.7647WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7702 - main_output_loss: 0.7015 - aux_output_loss: 0.6861 - main_output_acc: 0.4596 - main_output_recall_m: 0.2840 - aux_output_acc: 0.5280 - aux_output_recall_m: 0.8573 - val_loss: 0.7419 - val_main_output_loss: 0.6701 - val_aux_output_loss: 0.7180 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 58/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7996 - main_output_loss: 0.7292 - aux_output_loss: 0.7037 - main_output_acc: 0.3438 - main_output_recall_m: 0.2632 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.7895WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7647 - main_output_loss: 0.6960 - aux_output_loss: 0.6870 - main_output_acc: 0.4472 - main_output_recall_m: 0.2249 - aux_output_acc: 0.5590 - aux_output_recall_m: 0.8550 - val_loss: 0.7436 - val_main_output_loss: 0.6717 - val_aux_output_loss: 0.7195 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 59/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7439 - main_output_loss: 0.6763 - aux_output_loss: 0.6758 - main_output_acc: 0.4688 - main_output_recall_m: 0.3810 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.8095WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7452 - main_output_loss: 0.6768 - aux_output_loss: 0.6841 - main_output_acc: 0.5342 - main_output_recall_m: 0.3041 - aux_output_acc: 0.5093 - aux_output_recall_m: 0.6903 - val_loss: 0.7437 - val_main_output_loss: 0.6716 - val_aux_output_loss: 0.7205 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 60/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7521 - main_output_loss: 0.6829 - aux_output_loss: 0.6918 - main_output_acc: 0.5938 - main_output_recall_m: 0.2667 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.9333WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7558 - main_output_loss: 0.6871 - aux_output_loss: 0.6870 - main_output_acc: 0.4783 - main_output_recall_m: 0.2426 - aux_output_acc: 0.5217 - aux_output_recall_m: 0.8906 - val_loss: 0.7445 - val_main_output_loss: 0.6726 - val_aux_output_loss: 0.7190 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 61/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7682 - main_output_loss: 0.6984 - aux_output_loss: 0.6978 - main_output_acc: 0.5000 - main_output_recall_m: 0.2667 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.8667WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7536 - main_output_loss: 0.6851 - aux_output_loss: 0.6849 - main_output_acc: 0.5093 - main_output_recall_m: 0.2640 - aux_output_acc: 0.5652 - aux_output_recall_m: 0.9214 - val_loss: 0.7452 - val_main_output_loss: 0.6733 - val_aux_output_loss: 0.7195 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 62/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7918 - main_output_loss: 0.7224 - aux_output_loss: 0.6937 - main_output_acc: 0.3125 - main_output_recall_m: 0.1053 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.8421WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7626 - main_output_loss: 0.6945 - aux_output_loss: 0.6810 - main_output_acc: 0.4596 - main_output_recall_m: 0.2304 - aux_output_acc: 0.5590 - aux_output_recall_m: 0.7358 - val_loss: 0.7458 - val_main_output_loss: 0.6737 - val_aux_output_loss: 0.7210 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 63/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7843 - main_output_loss: 0.7152 - aux_output_loss: 0.6913 - main_output_acc: 0.4062 - main_output_recall_m: 0.2222 - aux_output_acc: 0.5938 - aux_output_recall_m: 0.8889WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7625 - main_output_loss: 0.6936 - aux_output_loss: 0.6896 - main_output_acc: 0.5031 - main_output_recall_m: 0.2642 - aux_output_acc: 0.5404 - aux_output_recall_m: 0.9038 - val_loss: 0.7456 - val_main_output_loss: 0.6736 - val_aux_output_loss: 0.7199 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 64/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7516 - main_output_loss: 0.6829 - aux_output_loss: 0.6877 - main_output_acc: 0.5312 - main_output_recall_m: 0.2353 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.8235WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7572 - main_output_loss: 0.6884 - aux_output_loss: 0.6880 - main_output_acc: 0.4907 - main_output_recall_m: 0.2124 - aux_output_acc: 0.5466 - aux_output_recall_m: 0.7261 - val_loss: 0.7464 - val_main_output_loss: 0.6743 - val_aux_output_loss: 0.7211 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 65/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7382 - main_output_loss: 0.6704 - aux_output_loss: 0.6779 - main_output_acc: 0.5938 - main_output_recall_m: 0.3529 - aux_output_acc: 0.5938 - aux_output_recall_m: 0.8824WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7564 - main_output_loss: 0.6886 - aux_output_loss: 0.6777 - main_output_acc: 0.5031 - main_output_recall_m: 0.2212 - aux_output_acc: 0.5963 - aux_output_recall_m: 0.9248 - val_loss: 0.7483 - val_main_output_loss: 0.6760 - val_aux_output_loss: 0.7231 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 66/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7653 - main_output_loss: 0.6963 - aux_output_loss: 0.6901 - main_output_acc: 0.5938 - main_output_recall_m: 0.2857 - aux_output_acc: 0.4688 - aux_output_recall_m: 1.0000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7505 - main_output_loss: 0.6824 - aux_output_loss: 0.6809 - main_output_acc: 0.5280 - main_output_recall_m: 0.2515 - aux_output_acc: 0.5590 - aux_output_recall_m: 0.9539 - val_loss: 0.7486 - val_main_output_loss: 0.6761 - val_aux_output_loss: 0.7249 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 1.0000\n",
      "Epoch 67/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7721 - main_output_loss: 0.7058 - aux_output_loss: 0.6628 - main_output_acc: 0.3438 - main_output_recall_m: 0.2000 - aux_output_acc: 0.5938 - aux_output_recall_m: 0.9000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7599 - main_output_loss: 0.6908 - aux_output_loss: 0.6910 - main_output_acc: 0.4969 - main_output_recall_m: 0.2171 - aux_output_acc: 0.5093 - aux_output_recall_m: 0.9104 - val_loss: 0.7486 - val_main_output_loss: 0.6758 - val_aux_output_loss: 0.7279 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 1.0000\n",
      "Epoch 68/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7357 - main_output_loss: 0.6643 - aux_output_loss: 0.7142 - main_output_acc: 0.8125 - main_output_recall_m: 0.5714 - aux_output_acc: 0.3750 - aux_output_recall_m: 0.8571WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7548 - main_output_loss: 0.6857 - aux_output_loss: 0.6912 - main_output_acc: 0.5528 - main_output_recall_m: 0.2841 - aux_output_acc: 0.5093 - aux_output_recall_m: 0.7415 - val_loss: 0.7476 - val_main_output_loss: 0.6746 - val_aux_output_loss: 0.7307 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 1.0000\n",
      "Epoch 69/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7538 - main_output_loss: 0.6867 - aux_output_loss: 0.6709 - main_output_acc: 0.5938 - main_output_recall_m: 0.2857 - aux_output_acc: 0.4688 - aux_output_recall_m: 1.0000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7555 - main_output_loss: 0.6870 - aux_output_loss: 0.6847 - main_output_acc: 0.5280 - main_output_recall_m: 0.2540 - aux_output_acc: 0.5217 - aux_output_recall_m: 0.9444 - val_loss: 0.7468 - val_main_output_loss: 0.6738 - val_aux_output_loss: 0.7297 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 1.0000\n",
      "Epoch 70/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7501 - main_output_loss: 0.6820 - aux_output_loss: 0.6809 - main_output_acc: 0.5625 - main_output_recall_m: 0.2667 - aux_output_acc: 0.5000 - aux_output_recall_m: 1.0000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7596 - main_output_loss: 0.6911 - aux_output_loss: 0.6850 - main_output_acc: 0.5280 - main_output_recall_m: 0.2415 - aux_output_acc: 0.5652 - aux_output_recall_m: 0.8153 - val_loss: 0.7467 - val_main_output_loss: 0.6737 - val_aux_output_loss: 0.7301 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 1.0000\n",
      "Epoch 71/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7507 - main_output_loss: 0.6829 - aux_output_loss: 0.6781 - main_output_acc: 0.5312 - main_output_recall_m: 0.1765 - aux_output_acc: 0.6250 - aux_output_recall_m: 1.0000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7540 - main_output_loss: 0.6855 - aux_output_loss: 0.6846 - main_output_acc: 0.4907 - main_output_recall_m: 0.3722 - aux_output_acc: 0.5528 - aux_output_recall_m: 0.9306 - val_loss: 0.7463 - val_main_output_loss: 0.6734 - val_aux_output_loss: 0.7294 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 1.0000\n",
      "Epoch 72/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7626 - main_output_loss: 0.6944 - aux_output_loss: 0.6822 - main_output_acc: 0.5000 - main_output_recall_m: 0.3889 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.8333WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7497 - main_output_loss: 0.6810 - aux_output_loss: 0.6867 - main_output_acc: 0.5031 - main_output_recall_m: 0.2969 - aux_output_acc: 0.5217 - aux_output_recall_m: 0.7444 - val_loss: 0.7441 - val_main_output_loss: 0.6712 - val_aux_output_loss: 0.7294 - val_main_output_acc: 0.5556 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 1.0000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 73/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7273 - main_output_loss: 0.6611 - aux_output_loss: 0.6613 - main_output_acc: 0.6250 - main_output_recall_m: 0.4211 - aux_output_acc: 0.6250 - aux_output_recall_m: 1.0000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7431 - main_output_loss: 0.6749 - aux_output_loss: 0.6823 - main_output_acc: 0.5714 - main_output_recall_m: 0.3508 - aux_output_acc: 0.5714 - aux_output_recall_m: 0.9256 - val_loss: 0.7434 - val_main_output_loss: 0.6707 - val_aux_output_loss: 0.7271 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 1.0000\n",
      "Epoch 74/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7604 - main_output_loss: 0.6894 - aux_output_loss: 0.7100 - main_output_acc: 0.5938 - main_output_recall_m: 0.3077 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.9231WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7529 - main_output_loss: 0.6846 - aux_output_loss: 0.6823 - main_output_acc: 0.4969 - main_output_recall_m: 0.2305 - aux_output_acc: 0.5714 - aux_output_recall_m: 0.8028 - val_loss: 0.7451 - val_main_output_loss: 0.6723 - val_aux_output_loss: 0.7276 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 75/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7706 - main_output_loss: 0.7012 - aux_output_loss: 0.6945 - main_output_acc: 0.5938 - main_output_recall_m: 0.4000 - aux_output_acc: 0.5312 - aux_output_recall_m: 1.0000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7479 - main_output_loss: 0.6803 - aux_output_loss: 0.6758 - main_output_acc: 0.5528 - main_output_recall_m: 0.2645 - aux_output_acc: 0.5776 - aux_output_recall_m: 0.7666 - val_loss: 0.7453 - val_main_output_loss: 0.6726 - val_aux_output_loss: 0.7268 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 76/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7576 - main_output_loss: 0.6892 - aux_output_loss: 0.6840 - main_output_acc: 0.4062 - main_output_recall_m: 0.2941 - aux_output_acc: 0.5000 - aux_output_recall_m: 0.8235WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7509 - main_output_loss: 0.6822 - aux_output_loss: 0.6866 - main_output_acc: 0.5031 - main_output_recall_m: 0.2255 - aux_output_acc: 0.5466 - aux_output_recall_m: 0.8333 - val_loss: 0.7445 - val_main_output_loss: 0.6719 - val_aux_output_loss: 0.7261 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 77/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7587 - main_output_loss: 0.6912 - aux_output_loss: 0.6751 - main_output_acc: 0.4375 - main_output_recall_m: 0.1176 - aux_output_acc: 0.5938 - aux_output_recall_m: 0.8235WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 12ms/step - loss: 0.7511 - main_output_loss: 0.6828 - aux_output_loss: 0.6830 - main_output_acc: 0.4969 - main_output_recall_m: 0.2226 - aux_output_acc: 0.5217 - aux_output_recall_m: 0.6341 - val_loss: 0.7437 - val_main_output_loss: 0.6711 - val_aux_output_loss: 0.7262 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 78/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7732 - main_output_loss: 0.7060 - aux_output_loss: 0.6718 - main_output_acc: 0.3125 - main_output_recall_m: 0.2000 - aux_output_acc: 0.5938 - aux_output_recall_m: 0.7200WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7599 - main_output_loss: 0.6916 - aux_output_loss: 0.6834 - main_output_acc: 0.5466 - main_output_recall_m: 0.3061 - aux_output_acc: 0.5652 - aux_output_recall_m: 0.6633 - val_loss: 0.7434 - val_main_output_loss: 0.6709 - val_aux_output_loss: 0.7255 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 79/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7424 - main_output_loss: 0.6748 - aux_output_loss: 0.6765 - main_output_acc: 0.4688 - main_output_recall_m: 0.3333 - aux_output_acc: 0.6250 - aux_output_recall_m: 0.8571WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7465 - main_output_loss: 0.6783 - aux_output_loss: 0.6815 - main_output_acc: 0.5590 - main_output_recall_m: 0.3593 - aux_output_acc: 0.5901 - aux_output_recall_m: 0.6586 - val_loss: 0.7432 - val_main_output_loss: 0.6708 - val_aux_output_loss: 0.7238 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.4444 - val_aux_output_recall_m: 0.7500\n",
      "Epoch 80/80\n",
      "1/6 [====>.........................] - ETA: 0s - loss: 0.7609 - main_output_loss: 0.6923 - aux_output_loss: 0.6857 - main_output_acc: 0.5000 - main_output_recall_m: 0.4000 - aux_output_acc: 0.5312 - aux_output_recall_m: 0.6000WARNING:tensorflow:Early stopping conditioned on metric `val_prc` which is not available. Available metrics are: loss,main_output_loss,aux_output_loss,main_output_acc,main_output_recall_m,aux_output_acc,aux_output_recall_m,val_loss,val_main_output_loss,val_aux_output_loss,val_main_output_acc,val_main_output_recall_m,val_aux_output_acc,val_aux_output_recall_m\n",
      "6/6 [==============================] - 0s 13ms/step - loss: 0.7497 - main_output_loss: 0.6811 - aux_output_loss: 0.6863 - main_output_acc: 0.5714 - main_output_recall_m: 0.3866 - aux_output_acc: 0.5466 - aux_output_recall_m: 0.5538 - val_loss: 0.7427 - val_main_output_loss: 0.6707 - val_aux_output_loss: 0.7208 - val_main_output_acc: 0.6667 - val_main_output_recall_m: 0.5000 - val_aux_output_acc: 0.3333 - val_aux_output_recall_m: 0.5000\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# reduce_lr = ReduceLROnPlateau(monitor='val_main_output_loss', factor=0.9, patience=30, min_lr=0.000001, verbose=1)\n",
    "# checkpointer = ModelCheckpoint(filepath='lstm.hdf5', verbose=1, save_best_only=True)\n",
    "import tensorflow as tf\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_prc', \n",
    "    verbose=1,\n",
    "    patience=10,\n",
    "    mode='max',\n",
    "    restore_best_weights=True)\n",
    "\n",
    "history=model.fit({'main_input': dframe_train_X_time.astype(np.float32), 'aux_input': dframe_train_static.astype(np.float32)},\n",
    "          {'main_output':dframe_train_Y.astype(np.float32), 'aux_output': dframe_train_Y.astype(np.float32)},\n",
    "          epochs=80 ,callbacks=[early_stopping],validation_split=0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5a7cf7fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# summarize history for loss\n",
    "plt.plot(history.history['main_output_loss'])\n",
    "plt.plot(history.history['val_main_output_loss'])\n",
    "plt.title('main model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "182ff91a",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_score = model.predict({'main_input': dframe_test_X_time.astype(np.float32), 'aux_input': dframe_test_static.astype(np.float32)})\n",
    "y_pred = y_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c4877ad8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_curve, auc\n",
    "from sklearn import metrics\n",
    "def compute_roc(y_test,y_score,method):\n",
    "    fpr = dict()\n",
    "    tpr = dict()\n",
    "    roc_auc = dict()\n",
    "    n_classes = 2\n",
    "    fpr, tpr, _ = metrics.roc_curve(y_test.ravel(), y_score.ravel())\n",
    "    # Compute micro-average ROC curve and ROC area\n",
    "    roc_auc = auc(fpr, tpr)\n",
    "    plt.figure()\n",
    "    plt.plot(fpr, tpr, label=method+' (AUC = %0.4f)' % roc_auc)\n",
    "    plt.plot([0, 1], [0, 1], color='navy', linestyle='--')\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('Receiver operating characteristic example')\n",
    "    plt.legend(loc=\"lower right\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2e041faa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.68      0.80       120\n",
      "           1       0.16      0.70      0.25        10\n",
      "\n",
      "    accuracy                           0.68       130\n",
      "   macro avg       0.56      0.69      0.53       130\n",
      "weighted avg       0.90      0.68      0.76       130\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# main auc\n",
    "compute_roc(dframe_test_Y,y_score[0],'deep learning')\n",
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(dframe_test_Y, (y_pred[0]>0.5).astype(int)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a3f8270c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv1d (Conv1D)             (None, 13, 64)            576       \n",
      "                                                                 \n",
      " max_pooling1d (MaxPooling1D  (None, 6, 64)            0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 384)               0         \n",
      "                                                                 \n",
      " main_output (Dense)         (None, 1)                 385       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 961\n",
      "Trainable params: 961\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Epoch 1/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 1.3784\n",
      "Epoch 2/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 1.1351\n",
      "Epoch 3/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 1.0315\n",
      "Epoch 4/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.9957\n",
      "Epoch 5/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.9764\n",
      "Epoch 6/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.9577\n",
      "Epoch 7/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.9429\n",
      "Epoch 8/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.9302\n",
      "Epoch 9/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.9177\n",
      "Epoch 10/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.9109\n",
      "Epoch 11/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.9050\n",
      "Epoch 12/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.9002\n",
      "Epoch 13/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8935\n",
      "Epoch 14/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8874\n",
      "Epoch 15/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8821\n",
      "Epoch 16/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8768\n",
      "Epoch 17/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8719\n",
      "Epoch 18/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8680\n",
      "Epoch 19/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8630\n",
      "Epoch 20/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8583\n",
      "Epoch 21/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8530\n",
      "Epoch 22/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8477\n",
      "Epoch 23/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8436\n",
      "Epoch 24/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8415\n",
      "Epoch 25/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8351\n",
      "Epoch 26/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8316\n",
      "Epoch 27/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8309\n",
      "Epoch 28/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8225\n",
      "Epoch 29/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8190\n",
      "Epoch 30/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8130\n",
      "Epoch 31/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8063\n",
      "Epoch 32/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8037\n",
      "Epoch 33/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7987\n",
      "Epoch 34/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7943\n",
      "Epoch 35/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7894\n",
      "Epoch 36/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7869\n",
      "Epoch 37/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7835\n",
      "Epoch 38/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7792\n",
      "Epoch 39/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7756\n",
      "Epoch 40/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7708\n",
      "Epoch 41/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7676\n",
      "Epoch 42/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7635\n",
      "Epoch 43/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7586\n",
      "Epoch 44/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7578\n",
      "Epoch 45/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7529\n",
      "Epoch 46/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7486\n",
      "Epoch 47/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7455\n",
      "Epoch 48/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7396\n",
      "Epoch 49/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7378\n",
      "Epoch 50/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7333\n",
      "Epoch 51/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7294\n",
      "Epoch 52/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7269\n",
      "Epoch 53/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7238\n",
      "Epoch 54/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7234\n",
      "Epoch 55/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7173\n",
      "Epoch 56/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7147\n",
      "Epoch 57/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7124\n",
      "Epoch 58/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7137\n",
      "Epoch 59/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7046\n",
      "Epoch 60/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7027\n",
      "Epoch 61/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7001\n",
      "Epoch 62/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6989\n",
      "Epoch 63/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6969\n",
      "Epoch 64/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6953\n",
      "Epoch 65/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6907\n",
      "Epoch 66/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6893\n",
      "Epoch 67/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6853\n",
      "Epoch 68/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6811\n",
      "Epoch 69/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6818\n",
      "Epoch 70/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6806\n",
      "Epoch 71/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6746\n",
      "Epoch 72/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6707\n",
      "Epoch 73/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6711\n",
      "Epoch 74/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6745\n",
      "Epoch 75/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6672\n",
      "Epoch 76/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6657\n",
      "Epoch 77/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6617\n",
      "Epoch 78/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6600\n",
      "Epoch 79/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6596\n",
      "Epoch 80/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6543\n",
      "Epoch 81/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.6526\n",
      "Epoch 82/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.6508\n",
      "Epoch 83/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6482\n",
      "Epoch 84/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6461\n",
      "Epoch 85/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6454\n",
      "Epoch 86/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6439\n",
      "Epoch 87/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6396\n",
      "Epoch 88/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6363\n",
      "Epoch 89/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6364\n",
      "Epoch 90/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6326\n",
      "Epoch 91/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6294\n",
      "Epoch 92/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6370\n",
      "Epoch 93/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6268\n",
      "Epoch 94/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6271\n",
      "Epoch 95/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6258\n",
      "Epoch 96/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6217\n",
      "Epoch 97/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6161\n",
      "Epoch 98/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6207\n",
      "Epoch 99/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6192\n",
      "Epoch 100/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.6113\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x2880b2901c0>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Flatten\n",
    "from keras.layers.convolutional import Conv1D\n",
    "from keras.layers.convolutional import MaxPooling1D\n",
    "\n",
    "\n",
    "# define model\n",
    "model = Sequential()\n",
    "model.add(Conv1D(filters=64, kernel_size=2, activation='relu', input_shape=(dframe_train_X_time.shape[1], dframe_train_X_time.shape[2])))\n",
    "model.add(MaxPooling1D(pool_size=2))\n",
    "model.add(Flatten())\n",
    "model.add( Dense(1, activation='sigmoid', name='main_output'))\n",
    "          \n",
    "model.summary()\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy')\n",
    "\n",
    "model.fit(dframe_train_X_time.astype(np.float32), dframe_train_Y.astype(np.float32), epochs=100, class_weight={0:1,1:2.5})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6baa5414",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.32      0.48       120\n",
      "           1       0.10      0.90      0.18        10\n",
      "\n",
      "    accuracy                           0.36       130\n",
      "   macro avg       0.54      0.61      0.33       130\n",
      "weighted avg       0.91      0.36      0.45       130\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "y_pred=model.predict(dframe_test_X_time, verbose=0)\n",
    "print(classification_report(dframe_test_Y, (y_pred>0.5).astype(int)))\n",
    "compute_roc(dframe_test_Y,(y_pred>0.5).astype(int),'deep learning')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
